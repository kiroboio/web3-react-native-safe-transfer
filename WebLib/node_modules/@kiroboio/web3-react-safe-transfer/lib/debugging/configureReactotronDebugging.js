"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureReactotronDebugging = void 0;
var reactotron_react_js_1 = __importDefault(require("reactotron-react-js"));
var reactotron_mst_1 = require("reactotron-mst");
var account_1 = require("../stores/account");
var configureReactotronDebugging = function () {
    if (process.env.NODE_ENV !== "development") {
        return;
    }
    var connectedReactotron = reactotron_react_js_1.default.use(reactotron_mst_1.mst())
        .configure()
        .connect();
    if (connectedReactotron.trackMstNode) {
        connectedReactotron.trackMstNode(account_1.accountStore);
    }
    var ConsoleTron = /** @class */ (function () {
        function ConsoleTron() {
        }
        ConsoleTron.log = function (message) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            reactotron_react_js_1.default.display({
                name: "LOG",
                preview: message,
                value: { message: message, args: args },
            });
        };
        ConsoleTron.warn = function (message) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            reactotron_react_js_1.default.display({
                name: "WARN",
                preview: message,
                value: { message: message, args: args },
                important: true,
            });
        };
        ConsoleTron.error = function (message) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            reactotron_react_js_1.default.display({
                name: "ERROR",
                preview: message,
                value: { message: message, args: args },
                important: true,
            });
        };
        return ConsoleTron;
    }());
    var consoleToReactotron = function () {
        if (process.env.REACT_APP_LOG_LEVEL !== "reactotron")
            return;
        console.error = ConsoleTron.error;
        console.warn = ConsoleTron.warn;
        console.log = ConsoleTron.log;
        return;
    };
    consoleToReactotron();
};
exports.configureReactotronDebugging = configureReactotronDebugging;

"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSecureStorage = void 0;
var react_1 = require("react");
var secure_ls_1 = __importDefault(require("secure-ls"));
var useSecureStorageEmptyRes = {
    error: { isError: true, content: undefined, isLocalStorageExist: false },
    secureStorage: undefined,
    setItem: undefined,
    getItem: undefined,
    removeItem: undefined,
    removeAll: undefined,
    clear: undefined,
    getAllKeys: undefined,
    setNewSecureStorageConfig: undefined,
};
exports.useSecureStorage = !window || !window.localStorage
    ? function () { return useSecureStorageEmptyRes; }
    : function (encryptionSecret, encodingType, encryptionNamespace) {
        if (encodingType === void 0) { encodingType = 'aes'; }
        var createNewSecureSecureStorage = function (encryptionSecret, encodingType) {
            if (encodingType === void 0) { encodingType = 'aes'; }
            var createNewSecureLS = function () {
                return new secure_ls_1.default({
                    encodingType: encodingType,
                    encryptionSecret: encryptionSecret,
                    isCompression: false,
                    encryptionNamespace: encryptionNamespace,
                });
            };
            try {
                var newSecureLS = createNewSecureLS();
                newSecureLS.error = {
                    isError: false,
                    content: undefined,
                    isLocalStorageExist: true,
                };
                return newSecureLS;
            }
            catch (e) {
                var res = useSecureStorageEmptyRes;
                res.error = { isError: true, content: e, isLocalStorageExist: true };
                return res;
            }
        };
        var _a = react_1.useState(createNewSecureSecureStorage(encryptionSecret, encodingType)), newSecureStorage = _a[0], setSecureStorageConfig = _a[1];
        var _b = react_1.useState({
            isError: false,
            content: undefined,
            isLocalStorageExist: true,
        }), error = _b[0], setError = _b[1];
        var secureStorageError = newSecureStorage;
        if (secureStorageError.error.isError) {
            return secureStorageError;
        }
        var secureStorage = newSecureStorage;
        var setNewSecureStorageConfig = function (encryptionSecret, encodingType) {
            if (encodingType === void 0) { encodingType = 'aes'; }
            setSecureStorageConfig(createNewSecureSecureStorage(encryptionSecret, encodingType));
        };
        var handleSetError = function (e) {
            setError(function (errorState) { return (__assign(__assign({}, errorState), { isError: true, content: e })); });
            throw new Error('Secure storage error');
        };
        var setItem = function (itemName, item) {
            try {
                secureStorage.set(itemName, item);
            }
            catch (e) {
                handleSetError(e);
            }
        };
        var getItem = function (itemName, isAllKeysData) {
            try {
                return secureStorage.get(itemName, isAllKeysData);
            }
            catch (e) {
                handleSetError(e);
                return;
            }
        };
        var removeItem = function (itemName) {
            try {
                secureStorage.remove(itemName);
            }
            catch (e) {
                handleSetError(e);
            }
        };
        var removeAll = function () {
            try {
                secureStorage.removeAll();
            }
            catch (e) {
                handleSetError(e);
            }
        };
        var clear = function () {
            try {
                secureStorage.clear();
            }
            catch (e) {
                handleSetError(e);
            }
        };
        var getAllKeys = function () {
            try {
                return secureStorage.getAllKeys();
            }
            catch (e) {
                handleSetError(e);
                return;
            }
        };
        return {
            error: error,
            secureStorage: secureStorage,
            setItem: setItem,
            getItem: getItem,
            removeItem: removeItem,
            removeAll: removeAll,
            clear: clear,
            getAllKeys: getAllKeys,
            setNewSecureStorageConfig: setNewSecureStorageConfig,
        };
    };

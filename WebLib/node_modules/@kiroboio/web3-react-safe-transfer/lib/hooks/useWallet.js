"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWallet = void 0;
var react_1 = require("react");
var useSecureStorage_1 = require("./useSecureStorage");
var InAppWalletConnector_1 = __importDefault(require("../customConnectors/InAppWalletConnector"));
var bip39_1 = require("bip39");
var initError = { isError: false, content: '' };
var useWallet = function () {
    var _a = react_1.useState(), provider = _a[0], setProvider = _a[1];
    var _b = react_1.useState(), mnemonic = _b[0], setMnemonic = _b[1];
    var _c = react_1.useState(initError), error = _c[0], setError = _c[1];
    var storage = useSecureStorage_1.useSecureStorage();
    var getCredentialsFromStorage = function () {
        if (storage.error.isError) {
            setError({ isError: true, content: storage.error.content });
            return { mnemonic: undefined, rpc: undefined };
        }
        var secureStorageSuccess = storage;
        var storageMnemonic = secureStorageSuccess.getItem('mnemonic');
        var storageRpc = secureStorageSuccess.getItem('rpc');
        return { mnemonic: storageMnemonic, rpc: storageRpc };
    };
    var setCredentialsToStorage = function (rpc, mnemonic) {
        if (storage.error.isError) {
            setError({ isError: true, content: storage.error.content });
            return;
        }
        var secureStorageSuccess = storage;
        secureStorageSuccess.setItem('mnemonic', mnemonic);
        secureStorageSuccess.setItem('rpc', rpc);
        setError({ isError: false, content: undefined });
    };
    var setNewMnemonic = function (mnemonic) {
        if (storage.error.isError) {
            setError({ isError: true, content: storage.error.content });
            return;
        }
        if (!mnemonic) {
            InAppWalletConnector_1.default.clearMnemonic();
        }
        else {
            InAppWalletConnector_1.default.setMnemonic(mnemonic);
        }
        var secureStorageSuccess = storage;
        secureStorageSuccess.setItem('mnemonic', mnemonic);
        setMnemonic(mnemonic);
    };
    var getActiveAccountFromStorage = function () {
        if (storage.error.isError) {
            setError({ isError: true, content: storage.error.content });
            return;
        }
        var secureStorageSuccess = storage;
        return secureStorageSuccess.getItem('activeAccount');
    };
    var setActiveAccount = function (account) {
        if (storage.error.isError) {
            setError({ isError: true, content: storage.error.content });
            return;
        }
        InAppWalletConnector_1.default.setActiveAccount(account);
        var secureStorageSuccess = storage;
        secureStorageSuccess.setItem('activeAccount', account);
    };
    var generateNewMnemonic = function () {
        if (storage.error.isError) {
            setError({ isError: true, content: storage.error.content });
            return;
        }
        var mnemonic = bip39_1.generateMnemonic();
        InAppWalletConnector_1.default.setMnemonic(mnemonic);
        var secureStorageSuccess = storage;
        secureStorageSuccess.setItem('mnemonic', mnemonic);
        setMnemonic(mnemonic);
    };
    var getMnemonic = function () {
        if (storage.error.isError) {
            setError({ isError: true, content: storage.error.content });
            return;
        }
        var secureStorageSuccess = storage;
        var storageMnemonic = secureStorageSuccess.getItem('mnemonic');
        return storageMnemonic;
    };
    return {
        error: error,
        mnemonic: mnemonic,
        provider: provider,
        getMnemonic: getMnemonic,
        setNewMnemonic: setNewMnemonic,
        generateNewMnemonic: generateNewMnemonic,
        setProvider: setProvider,
        getCredentialsFromStorage: getCredentialsFromStorage,
        setCredentialsToStorage: setCredentialsToStorage,
        getActiveAccountFromStorage: getActiveAccountFromStorage,
        setActiveAccount: setActiveAccount,
    };
};
exports.useWallet = useWallet;

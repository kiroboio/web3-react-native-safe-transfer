import { EthTransferResponseDto, EthTokenInfo, EthSwapInfo } from "../dto/EthTransfersDto";
import { Instance } from "mobx-state-tree";
import { Connectors } from "../hooks/useWeb3";
declare type MobxClearInstance<T> = Omit<Instance<T>, symbol>;
export interface ITransferItem {
    id: string;
    from: string;
    to: string;
    value: string;
    fees: string;
    salt: string;
    secretHash: string;
    state: EthTransferResponseDto["state"];
    txid: string;
    updatedAt: Date;
    confirmedBlock: number;
    message: string;
    token?: EthTokenInfo;
    swap?: EthSwapInfo;
}
export declare type Currency = "ETH" | "KIRO" | "USDT" | "BNB" | "UNI" | "LINK" | "SUSHI" | "USDC" | "WBTC" | "DAI";
export declare const Token: import("mobx-state-tree").IModelType<{
    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
}, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare const Swap: import("mobx-state-tree").IModelType<{
    value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
}, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface ITransferToken extends MobxClearInstance<typeof Token> {
}
export declare const Transfer: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").ISimpleType<string>;
    txid: import("mobx-state-tree").ISimpleType<string>;
    from: import("mobx-state-tree").ISimpleType<string>;
    to: import("mobx-state-tree").ISimpleType<string>;
    value: import("mobx-state-tree").ISimpleType<string>;
    fees: import("mobx-state-tree").ISimpleType<string>;
    salt: import("mobx-state-tree").ISimpleType<string>;
    secretHash: import("mobx-state-tree").ISimpleType<string>;
    state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
    updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
    confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
    message: import("mobx-state-tree").ISimpleType<string>;
    token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
}, {
    update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface ITransfer extends MobxClearInstance<typeof Transfer> {
}
export declare const CmdStatus: import("mobx-state-tree").IModelType<{
    ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
}, {
    clear(): void;
    prepared(): void;
    started(): void;
    finished(err?: {
        err: {
            message: string;
        };
    } | undefined): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface ICmdStatus extends MobxClearInstance<typeof CmdStatus> {
}
declare const CmdActions: (self: {
    is: MobxClearInstance<typeof CmdStatus>;
}) => {
    start(): void;
    done(): void;
    failed({ message }: {
        message: string;
    }): void;
    clearErrors(): void;
    clear(): void;
};
export interface ICmdActions extends MobxClearInstance<typeof CmdActions> {
}
declare const CmdBase: import("mobx-state-tree").IModelType<{
    is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        clear(): void;
        prepared(): void;
        started(): void;
        finished(err?: {
            err: {
                message: string;
            };
        } | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
}, {
    start(): void;
    done(): void;
    failed({ message }: {
        message: string;
    }): void;
    clearErrors(): void;
    clear(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface ICmdBase extends MobxClearInstance<typeof CmdBase> {
    is: ICmdStatus;
}
export declare const ConnectCmd: import("mobx-state-tree").IModelType<{
    is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        clear(): void;
        prepared(): void;
        started(): void;
        finished(err?: {
            err: {
                message: string;
            };
        } | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
} & {
    connector: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    isConnected: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
}, {
    start(): void;
    done(): void;
    failed({ message }: {
        message: string;
    }): void;
    clearErrors(): void;
    clear(): void;
} & {
    prepare(connector: Connectors | undefined): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface IConnectCmd extends MobxClearInstance<typeof ConnectCmd> {
    is: ICmdStatus;
}
export declare const DisconnectCmd: import("mobx-state-tree").IModelType<{
    is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        clear(): void;
        prepared(): void;
        started(): void;
        finished(err?: {
            err: {
                message: string;
            };
        } | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
}, {
    start(): void;
    done(): void;
    failed({ message }: {
        message: string;
    }): void;
    clearErrors(): void;
    clear(): void;
} & {
    prepare(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface IDisconnectCmd extends MobxClearInstance<typeof DisconnectCmd> {
    is: ICmdStatus;
}
export interface ISafeTransferItem {
    address: string;
    synced: boolean;
    feesFormula: string;
    rewardFormula: string;
}
export declare const SafeTransfer: import("mobx-state-tree").IModelType<{
    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    synced: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    feesFormula: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    rewardFormula: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
}, {
    fees: (_value: string) => "0";
    reward: (_value: string, _stakingValue: string, _fees: string) => "0";
} & {
    setData(data: ISafeTransferItem): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface ISafeTransfer extends MobxClearInstance<typeof SafeTransfer> {
}
export interface IStakingItem {
    address: string;
}
export declare const Staking: import("mobx-state-tree").IModelType<{
    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    balance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
}, {
    setData({ address }: IStakingItem): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface IStaking extends MobxClearInstance<typeof Staking> {
}
export interface IKiroTokenItem {
    address: string;
}
export declare const KiroToken: import("mobx-state-tree").IModelType<{
    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
}, {
    setData({ address }: IKiroTokenItem): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface IKiroToken extends MobxClearInstance<typeof KiroToken> {
}
export interface IERC20TokenItem {
    address: string;
    name: string;
    symbol: string;
    decimals: number;
    balance: string;
    rate?: number;
}
export declare const ERC20Token: import("mobx-state-tree").IModelType<{
    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    name: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    balance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    rate: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
}, {
    readonly tokenBalance: string;
} & {
    setData({ address, name, symbol, decimals, balance }: IERC20TokenItem): void;
    setBalance(balance: string): void;
    clearBalance(): void;
    setRate(rate: number): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare const ERC20Tokens: import("mobx-state-tree").IModelType<{
    map: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        balance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        rate: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        readonly tokenBalance: string;
    } & {
        setData({ address, name, symbol, decimals, balance }: IERC20TokenItem): void;
        setBalance(balance: string): void;
        clearBalance(): void;
        setRate(rate: number): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
}, {
    readonly list: ({
        address: string;
        name: string;
        symbol: string;
        decimals: number;
        balance: string;
        rate: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly tokenBalance: string;
    } & {
        setData({ address, name, symbol, decimals, balance }: IERC20TokenItem): void;
        setBalance(balance: string): void;
        clearBalance(): void;
        setRate(rate: number): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        balance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        rate: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        readonly tokenBalance: string;
    } & {
        setData({ address, name, symbol, decimals, balance }: IERC20TokenItem): void;
        setBalance(balance: string): void;
        clearBalance(): void;
        setRate(rate: number): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
} & {
    addToken({ address, name, symbol, decimals, balance, rate, }: IERC20TokenItem): void;
    setBalance(address: string, balance: string): void;
    clearBalances(): void;
    setRate(address: string, rate: number): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
declare type MobxClearERC20Tokens = Omit<Instance<typeof ERC20Tokens>, symbol | "map" | "list">;
export interface IERC20Tokens extends MobxClearInstance<MobxClearERC20Tokens> {
    map: Map<string, IERC20TokenItem>;
    list: IERC20TokenItem[];
}
export interface DeviceInfoData {
    isMobile: boolean;
    haveMetaMask: boolean;
    ethereumProvider: boolean;
    loggedIn: boolean;
}
export declare const DeviceInfo: import("mobx-state-tree").IModelType<{
    isMobile: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    haveMetaMask: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    ethereumProvider: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    loggedIn: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
}, {
    setData({ isMobile, haveMetaMask, ethereumProvider, loggedIn, }: DeviceInfoData): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface IDeviceInfo extends MobxClearInstance<typeof DeviceInfo> {
}
export declare const ApprovedCmd: import("mobx-state-tree").IModelType<{
    is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        clear(): void;
        prepared(): void;
        started(): void;
        finished(err?: {
            err: {
                message: string;
            };
        } | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
} & {
    amount: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    contractAddress: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
}, {
    start(): void;
    done(): void;
    failed({ message }: {
        message: string;
    }): void;
    clearErrors(): void;
    clear(): void;
} & {
    prepare(contractAddress: string): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface IApprovedCmd extends MobxClearInstance<typeof ApprovedCmd> {
    is: ICmdStatus;
}
export interface DepositCmdParams {
    from: string;
    to: string;
    value: string;
    publicSalt: string;
    privateSalt: string;
    secretHash: string;
    message: string;
}
export declare const DepositCmd: import("mobx-state-tree").IModelType<{
    is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        clear(): void;
        prepared(): void;
        started(): void;
        finished(err?: {
            err: {
                message: string;
            };
        } | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
} & {
    from: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    to: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    publicSalt: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    privateSalt: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    secretHash: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    message: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
}, {
    start(): void;
    done(): void;
    failed({ message }: {
        message: string;
    }): void;
    clearErrors(): void;
    clear(): void;
} & {
    prepare(params: DepositCmdParams): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface IDepositCmd extends MobxClearInstance<typeof DepositCmd> {
    is: ICmdStatus;
}
export interface swapDepositCmdParams {
    from: string;
    to: string;
    value: string;
    desiredValue: string;
    publicSalt: string;
    privateSalt: string;
    secretHash: string;
    message: string;
}
export declare const swapDepositCmd: import("mobx-state-tree").IModelType<{
    is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        clear(): void;
        prepared(): void;
        started(): void;
        finished(err?: {
            err: {
                message: string;
            };
        } | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
} & {
    from: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    to: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    desiredValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    publicSalt: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    privateSalt: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    secretHash: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    message: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
}, {
    start(): void;
    done(): void;
    failed({ message }: {
        message: string;
    }): void;
    clearErrors(): void;
    clear(): void;
} & {
    prepare(params: swapDepositCmdParams): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface ISwapDepositCmd extends MobxClearInstance<typeof swapDepositCmd> {
    is: ICmdStatus;
}
export interface FetchCmdParams {
    list: string;
    amount: number;
}
export declare const FetchCmd: import("mobx-state-tree").IModelType<{
    is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        clear(): void;
        prepared(): void;
        started(): void;
        finished(err?: {
            err: {
                message: string;
            };
        } | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
} & {
    list: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    amount: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
}, {
    start(): void;
    done(): void;
    failed({ message }: {
        message: string;
    }): void;
    clearErrors(): void;
    clear(): void;
} & {
    prepare(params: FetchCmdParams): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface IFetchCmd extends MobxClearInstance<typeof FetchCmd> {
    is: ICmdStatus;
}
export interface RetrieveCmdParams {
    id: string;
}
export declare const RetrieveCmd: import("mobx-state-tree").IModelType<{
    is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        clear(): void;
        prepared(): void;
        started(): void;
        finished(err?: {
            err: {
                message: string;
            };
        } | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
} & {
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
}, {
    start(): void;
    done(): void;
    failed({ message }: {
        message: string;
    }): void;
    clearErrors(): void;
    clear(): void;
} & {
    prepare(params: RetrieveCmdParams): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface IRetrieveCmd extends MobxClearInstance<typeof RetrieveCmd> {
    is: ICmdStatus;
}
export interface CollectCmdParams {
    id: string;
    key: string;
}
export declare const CollectCmd: import("mobx-state-tree").IModelType<{
    is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        clear(): void;
        prepared(): void;
        started(): void;
        finished(err?: {
            err: {
                message: string;
            };
        } | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
} & {
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    key: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
}, {
    start(): void;
    done(): void;
    failed({ message }: {
        message: string;
    }): void;
    clearErrors(): void;
    clear(): void;
} & {
    prepare(params: CollectCmdParams): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface ICollectCmd extends MobxClearInstance<typeof CollectCmd> {
    is: ICmdStatus;
}
export declare const Transfers: import("mobx-state-tree").IModelType<{
    name: import("mobx-state-tree").ISimpleType<string>;
    map: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    count: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    fetched: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    fetchCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    } & {
        list: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        amount: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    } & {
        prepare(params: FetchCmdParams): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
}, {
    readonly list: ({
        id: string;
        txid: string;
        from: string;
        to: string;
        value: string;
        fees: string;
        salt: string;
        secretHash: string;
        state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
        updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
        confirmedBlock: number;
        message: string;
        token: {
            address: string;
            decimals: number;
            symbol: string;
            type: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        swap: {
            value: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            fees: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly fetch: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run(amount: number): void;
    };
} & {
    setFetched(count: number): void;
    add({ address, transfers, count, }: {
        address: string;
        transfers: ITransferItem[];
        count: number;
    }): void;
    upsert(address: string, transfer: ITransferItem): void;
    update(address: string, transfer: {
        id: string;
        state: EthTransferResponseDto['state'];
        txid?: string;
    }): void;
    delete(address: string, id: string): void;
    remove(address: string, filter: (item: ITransferItem) => boolean): ITransferItem[];
    clear(): void;
} & {
    readonly list: (number | [any] | ((() => string) & (() => string)) | (() => IterableIterator<{
        id: string;
        txid: string;
        from: string;
        to: string;
        value: string;
        fees: string;
        salt: string;
        secretHash: string;
        state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
        updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
        confirmedBlock: number;
        message: string;
        token: {
            address: string;
            decimals: number;
            symbol: string;
            type: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        swap: {
            value: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            fees: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | (() => void) | ((key: string) => boolean) | ((callbackfn: (value: {
        id: string;
        txid: string;
        from: string;
        to: string;
        value: string;
        fees: string;
        salt: string;
        secretHash: string;
        state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
        updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
        confirmedBlock: number;
        message: string;
        token: {
            address: string;
            decimals: number;
            symbol: string;
            type: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        swap: {
            value: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            fees: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, key: string, map: import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) => void, thisArg?: any) => void) | ((key: string) => ({
        id: string;
        txid: string;
        from: string;
        to: string;
        value: string;
        fees: string;
        salt: string;
        secretHash: string;
        state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
        updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
        confirmedBlock: number;
        message: string;
        token: {
            address: string;
            decimals: number;
            symbol: string;
            type: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        swap: {
            value: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            fees: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined) | ((key: string) => boolean) | ((key: string, value: import("mobx-state-tree/dist/internal").ExtractCSTWithSTN<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((value: import("mobx-state-tree/dist/internal").ExtractCSTWithSTN<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => {
        id: string;
        txid: string;
        from: string;
        to: string;
        value: string;
        fees: string;
        salt: string;
        secretHash: string;
        state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
        updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
        confirmedBlock: number;
        message: string;
        token: {
            address: string;
            decimals: number;
            symbol: string;
            type: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        swap: {
            value: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            fees: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | (() => IterableIterator<string>) | (() => IterableIterator<[string, {
        id: string;
        txid: string;
        from: string;
        to: string;
        value: string;
        fees: string;
        salt: string;
        secretHash: string;
        state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
        updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
        confirmedBlock: number;
        message: string;
        token: {
            address: string;
            decimals: number;
            symbol: string;
            type: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        swap: {
            value: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            fees: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>]>) | ((other: any) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((values: any) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | (() => import("mobx").IKeyValueMap<import("mobx-state-tree").ModelSnapshotType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }>>) | (() => import("mobx").IKeyValueMap<import("mobx-state-tree").ModelSnapshotType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }>>) | (() => Map<string, {
        id: string;
        txid: string;
        from: string;
        to: string;
        value: string;
        fees: string;
        salt: string;
        secretHash: string;
        state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
        updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
        confirmedBlock: number;
        message: string;
        token: {
            address: string;
            decimals: number;
            symbol: string;
            type: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        swap: {
            value: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            fees: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((listener: (changes: import("mobx").IMapDidChange<string, {
        id: string;
        txid: string;
        from: string;
        to: string;
        value: string;
        fees: string;
        salt: string;
        secretHash: string;
        state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
        updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
        confirmedBlock: number;
        message: string;
        token: {
            address: string;
            decimals: number;
            symbol: string;
            type: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        swap: {
            value: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            fees: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) => void, fireImmediately?: boolean | undefined) => import("mobx").Lambda) | ((handler: import("mobx").IInterceptor<import("mobx").IMapWillChange<string, {
        id: string;
        txid: string;
        from: string;
        to: string;
        value: string;
        fees: string;
        salt: string;
        secretHash: string;
        state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
        updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
        confirmedBlock: number;
        message: string;
        token: {
            address: string;
            decimals: number;
            symbol: string;
            type: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        swap: {
            value: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            fees: string;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>>) => import("mobx").Lambda) | [import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        txid: import("mobx-state-tree").ISimpleType<string>;
        from: import("mobx-state-tree").ISimpleType<string>;
        to: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
        fees: import("mobx-state-tree").ISimpleType<string>;
        salt: import("mobx-state-tree").ISimpleType<string>;
        secretHash: import("mobx-state-tree").ISimpleType<string>;
        state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
        updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
        confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
        message: import("mobx-state-tree").ISimpleType<string>;
        token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>] | undefined)[];
    readonly activeCount: number;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
declare const Mnemonic: import("mobx-state-tree").IModelType<{
    data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    clearCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    removeCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    restoreCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
}, {
    readonly clear: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run(): void;
    };
    readonly remove: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run(): void;
    };
    readonly restore: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run(): void;
    };
} & {
    set(mnemonic?: string | undefined): void;
    clear(): void;
    remove(): void;
    restore(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface IMnemonic extends MobxClearInstance<typeof Mnemonic> {
    clearCmd: ICmdBase;
    removeCmd: ICmdBase;
    restoreCmd: ICmdBase;
}
declare const WalletAddressCmd: import("mobx-state-tree").IModelType<{
    is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        clear(): void;
        prepared(): void;
        started(): void;
        finished(err?: {
            err: {
                message: string;
            };
        } | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
} & {
    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
}, {
    start(): void;
    done(): void;
    failed({ message }: {
        message: string;
    }): void;
    clearErrors(): void;
    clear(): void;
} & {
    prepare(address?: string | undefined): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface IWalletAddressCmd extends MobxClearInstance<typeof WalletAddressCmd> {
    is: ICmdStatus;
}
declare const Wallet: import("mobx-state-tree").IModelType<{
    mnemonic: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        clearCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            }, {
                clear(): void;
                prepared(): void;
                started(): void;
                finished(err?: {
                    err: {
                        message: string;
                    };
                } | undefined): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            start(): void;
            done(): void;
            failed({ message }: {
                message: string;
            }): void;
            clearErrors(): void;
            clear(): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        removeCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            }, {
                clear(): void;
                prepared(): void;
                started(): void;
                finished(err?: {
                    err: {
                        message: string;
                    };
                } | undefined): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            start(): void;
            done(): void;
            failed({ message }: {
                message: string;
            }): void;
            clearErrors(): void;
            clear(): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        restoreCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            }, {
                clear(): void;
                prepared(): void;
                started(): void;
                finished(err?: {
                    err: {
                        message: string;
                    };
                } | undefined): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            start(): void;
            done(): void;
            failed({ message }: {
                message: string;
            }): void;
            clearErrors(): void;
            clear(): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        readonly clear: {
            readonly is: {
                readonly withFailMessage: string;
                readonly withId: number;
                readonly ready: boolean;
                readonly done: boolean;
                readonly failed: boolean;
                readonly running: boolean;
            };
            run(): void;
        };
        readonly remove: {
            readonly is: {
                readonly withFailMessage: string;
                readonly withId: number;
                readonly ready: boolean;
                readonly done: boolean;
                readonly failed: boolean;
                readonly running: boolean;
            };
            run(): void;
        };
        readonly restore: {
            readonly is: {
                readonly withFailMessage: string;
                readonly withId: number;
                readonly ready: boolean;
                readonly done: boolean;
                readonly failed: boolean;
                readonly running: boolean;
            };
            run(): void;
        };
    } & {
        set(mnemonic?: string | undefined): void;
        clear(): void;
        remove(): void;
        restore(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    activeAccount: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    accounts: import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>;
    addAddressCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    } & {
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    } & {
        prepare(address?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    removeAddressCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    } & {
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    } & {
        prepare(address?: string | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
}, {
    readonly removeAddress: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run(address: string): void;
    };
} & {
    addWalletAddress(): void;
    setAccounts(accounts: string[]): void;
    setActiveAccount(activeAccount: string | undefined): void;
    generateMnemonic(): void;
    setMnemonic(mnemonic?: string | undefined): void;
    getMnemonic(): string;
    tryRestoreMnemonicFromStorage(): void;
    clearMnemonic(): void;
    removeMnemonic(): void;
    changeMnemonic(mnemonic: string): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
declare type MobxClearWallet = Omit<Instance<typeof Wallet>, symbol | "accounts">;
export interface IWallet extends MobxClearWallet {
    accounts: string[];
    mnemonic: IMnemonic;
    addAddressCmd: IWalletAddressCmd;
    removeAddressCmd: IWalletAddressCmd;
}
export interface ERC20TokenItem {
    address: string;
    name: string;
    symbol: string;
    decimals: number;
    balance: string;
    rate?: number;
}
export declare const Account: import("mobx-state-tree").IModelType<{
    allowance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<string, string, string>, [undefined]>;
    wallet: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        mnemonic: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            clearCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                }, {
                    clear(): void;
                    prepared(): void;
                    started(): void;
                    finished(err?: {
                        err: {
                            message: string;
                        };
                    } | undefined): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            }, {
                start(): void;
                done(): void;
                failed({ message }: {
                    message: string;
                }): void;
                clearErrors(): void;
                clear(): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            removeCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                }, {
                    clear(): void;
                    prepared(): void;
                    started(): void;
                    finished(err?: {
                        err: {
                            message: string;
                        };
                    } | undefined): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            }, {
                start(): void;
                done(): void;
                failed({ message }: {
                    message: string;
                }): void;
                clearErrors(): void;
                clear(): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            restoreCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                }, {
                    clear(): void;
                    prepared(): void;
                    started(): void;
                    finished(err?: {
                        err: {
                            message: string;
                        };
                    } | undefined): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            }, {
                start(): void;
                done(): void;
                failed({ message }: {
                    message: string;
                }): void;
                clearErrors(): void;
                clear(): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            readonly clear: {
                readonly is: {
                    readonly withFailMessage: string;
                    readonly withId: number;
                    readonly ready: boolean;
                    readonly done: boolean;
                    readonly failed: boolean;
                    readonly running: boolean;
                };
                run(): void;
            };
            readonly remove: {
                readonly is: {
                    readonly withFailMessage: string;
                    readonly withId: number;
                    readonly ready: boolean;
                    readonly done: boolean;
                    readonly failed: boolean;
                    readonly running: boolean;
                };
                run(): void;
            };
            readonly restore: {
                readonly is: {
                    readonly withFailMessage: string;
                    readonly withId: number;
                    readonly ready: boolean;
                    readonly done: boolean;
                    readonly failed: boolean;
                    readonly running: boolean;
                };
                run(): void;
            };
        } & {
            set(mnemonic?: string | undefined): void;
            clear(): void;
            remove(): void;
            restore(): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        activeAccount: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        accounts: import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>;
        addAddressCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            }, {
                clear(): void;
                prepared(): void;
                started(): void;
                finished(err?: {
                    err: {
                        message: string;
                    };
                } | undefined): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        } & {
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {
            start(): void;
            done(): void;
            failed({ message }: {
                message: string;
            }): void;
            clearErrors(): void;
            clear(): void;
        } & {
            prepare(address?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        removeAddressCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            }, {
                clear(): void;
                prepared(): void;
                started(): void;
                finished(err?: {
                    err: {
                        message: string;
                    };
                } | undefined): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        } & {
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        }, {
            start(): void;
            done(): void;
            failed({ message }: {
                message: string;
            }): void;
            clearErrors(): void;
            clear(): void;
        } & {
            prepare(address?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        readonly removeAddress: {
            readonly is: {
                readonly withFailMessage: string;
                readonly withId: number;
                readonly ready: boolean;
                readonly done: boolean;
                readonly failed: boolean;
                readonly running: boolean;
            };
            run(address: string): void;
        };
    } & {
        addWalletAddress(): void;
        setAccounts(accounts: string[]): void;
        setActiveAccount(activeAccount: string | undefined): void;
        generateMnemonic(): void;
        setMnemonic(mnemonic?: string | undefined): void;
        getMnemonic(): string;
        tryRestoreMnemonicFromStorage(): void;
        clearMnemonic(): void;
        removeMnemonic(): void;
        changeMnemonic(mnemonic: string): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    chainId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    active: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    block: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    balance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    tokenBalance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    stakingBalance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    rate: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    history: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        map: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        count: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        fetched: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        fetchCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            }, {
                clear(): void;
                prepared(): void;
                started(): void;
                finished(err?: {
                    err: {
                        message: string;
                    };
                } | undefined): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        } & {
            list: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            amount: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            start(): void;
            done(): void;
            failed({ message }: {
                message: string;
            }): void;
            clearErrors(): void;
            clear(): void;
        } & {
            prepare(params: FetchCmdParams): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        readonly list: ({
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
        readonly fetch: {
            readonly is: {
                readonly withFailMessage: string;
                readonly withId: number;
                readonly ready: boolean;
                readonly done: boolean;
                readonly failed: boolean;
                readonly running: boolean;
            };
            run(amount: number): void;
        };
    } & {
        setFetched(count: number): void;
        add({ address, transfers, count, }: {
            address: string;
            transfers: ITransferItem[];
            count: number;
        }): void;
        upsert(address: string, transfer: ITransferItem): void;
        update(address: string, transfer: {
            id: string;
            state: EthTransferResponseDto['state'];
            txid?: string;
        }): void;
        delete(address: string, id: string): void;
        remove(address: string, filter: (item: ITransferItem) => boolean): ITransferItem[];
        clear(): void;
    } & {
        readonly list: (number | [any] | ((() => string) & (() => string)) | (() => IterableIterator<{
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | (() => void) | ((key: string) => boolean) | ((callbackfn: (value: {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, key: string, map: import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) => void, thisArg?: any) => void) | ((key: string) => ({
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined) | ((key: string) => boolean) | ((key: string, value: import("mobx-state-tree/dist/internal").ExtractCSTWithSTN<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((value: import("mobx-state-tree/dist/internal").ExtractCSTWithSTN<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | (() => IterableIterator<string>) | (() => IterableIterator<[string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>]>) | ((other: any) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((values: any) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | (() => import("mobx").IKeyValueMap<import("mobx-state-tree").ModelSnapshotType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }>>) | (() => import("mobx").IKeyValueMap<import("mobx-state-tree").ModelSnapshotType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }>>) | (() => Map<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((listener: (changes: import("mobx").IMapDidChange<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) => void, fireImmediately?: boolean | undefined) => import("mobx").Lambda) | ((handler: import("mobx").IInterceptor<import("mobx").IMapWillChange<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>>) => import("mobx").Lambda) | [import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>] | undefined)[];
        readonly activeCount: number;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    transfers: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        map: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        count: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        fetched: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        fetchCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            }, {
                clear(): void;
                prepared(): void;
                started(): void;
                finished(err?: {
                    err: {
                        message: string;
                    };
                } | undefined): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        } & {
            list: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            amount: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            start(): void;
            done(): void;
            failed({ message }: {
                message: string;
            }): void;
            clearErrors(): void;
            clear(): void;
        } & {
            prepare(params: FetchCmdParams): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        readonly list: ({
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
        readonly fetch: {
            readonly is: {
                readonly withFailMessage: string;
                readonly withId: number;
                readonly ready: boolean;
                readonly done: boolean;
                readonly failed: boolean;
                readonly running: boolean;
            };
            run(amount: number): void;
        };
    } & {
        setFetched(count: number): void;
        add({ address, transfers, count, }: {
            address: string;
            transfers: ITransferItem[];
            count: number;
        }): void;
        upsert(address: string, transfer: ITransferItem): void;
        update(address: string, transfer: {
            id: string;
            state: EthTransferResponseDto['state'];
            txid?: string;
        }): void;
        delete(address: string, id: string): void;
        remove(address: string, filter: (item: ITransferItem) => boolean): ITransferItem[];
        clear(): void;
    } & {
        readonly list: (number | [any] | ((() => string) & (() => string)) | (() => IterableIterator<{
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | (() => void) | ((key: string) => boolean) | ((callbackfn: (value: {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, key: string, map: import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) => void, thisArg?: any) => void) | ((key: string) => ({
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined) | ((key: string) => boolean) | ((key: string, value: import("mobx-state-tree/dist/internal").ExtractCSTWithSTN<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((value: import("mobx-state-tree/dist/internal").ExtractCSTWithSTN<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | (() => IterableIterator<string>) | (() => IterableIterator<[string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>]>) | ((other: any) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((values: any) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | (() => import("mobx").IKeyValueMap<import("mobx-state-tree").ModelSnapshotType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }>>) | (() => import("mobx").IKeyValueMap<import("mobx-state-tree").ModelSnapshotType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }>>) | (() => Map<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((listener: (changes: import("mobx").IMapDidChange<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) => void, fireImmediately?: boolean | undefined) => import("mobx").Lambda) | ((handler: import("mobx").IInterceptor<import("mobx").IMapWillChange<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>>) => import("mobx").Lambda) | [import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>] | undefined)[];
        readonly activeCount: number;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    incoming: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        map: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        count: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        fetched: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        fetchCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            }, {
                clear(): void;
                prepared(): void;
                started(): void;
                finished(err?: {
                    err: {
                        message: string;
                    };
                } | undefined): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        } & {
            list: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            amount: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            start(): void;
            done(): void;
            failed({ message }: {
                message: string;
            }): void;
            clearErrors(): void;
            clear(): void;
        } & {
            prepare(params: FetchCmdParams): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        readonly list: ({
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
        readonly fetch: {
            readonly is: {
                readonly withFailMessage: string;
                readonly withId: number;
                readonly ready: boolean;
                readonly done: boolean;
                readonly failed: boolean;
                readonly running: boolean;
            };
            run(amount: number): void;
        };
    } & {
        setFetched(count: number): void;
        add({ address, transfers, count, }: {
            address: string;
            transfers: ITransferItem[];
            count: number;
        }): void;
        upsert(address: string, transfer: ITransferItem): void;
        update(address: string, transfer: {
            id: string;
            state: EthTransferResponseDto['state'];
            txid?: string;
        }): void;
        delete(address: string, id: string): void;
        remove(address: string, filter: (item: ITransferItem) => boolean): ITransferItem[];
        clear(): void;
    } & {
        readonly list: (number | [any] | ((() => string) & (() => string)) | (() => IterableIterator<{
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | (() => void) | ((key: string) => boolean) | ((callbackfn: (value: {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, key: string, map: import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) => void, thisArg?: any) => void) | ((key: string) => ({
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined) | ((key: string) => boolean) | ((key: string, value: import("mobx-state-tree/dist/internal").ExtractCSTWithSTN<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((value: import("mobx-state-tree/dist/internal").ExtractCSTWithSTN<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | (() => IterableIterator<string>) | (() => IterableIterator<[string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>]>) | ((other: any) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((values: any) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | (() => import("mobx").IKeyValueMap<import("mobx-state-tree").ModelSnapshotType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }>>) | (() => import("mobx").IKeyValueMap<import("mobx-state-tree").ModelSnapshotType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }>>) | (() => Map<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((listener: (changes: import("mobx").IMapDidChange<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) => void, fireImmediately?: boolean | undefined) => import("mobx").Lambda) | ((handler: import("mobx").IInterceptor<import("mobx").IMapWillChange<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>>) => import("mobx").Lambda) | [import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>] | undefined)[];
        readonly activeCount: number;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    outgoing: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        map: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        count: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        fetched: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        fetchCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            }, {
                clear(): void;
                prepared(): void;
                started(): void;
                finished(err?: {
                    err: {
                        message: string;
                    };
                } | undefined): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        } & {
            list: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            amount: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            start(): void;
            done(): void;
            failed({ message }: {
                message: string;
            }): void;
            clearErrors(): void;
            clear(): void;
        } & {
            prepare(params: FetchCmdParams): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        readonly list: ({
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
        readonly fetch: {
            readonly is: {
                readonly withFailMessage: string;
                readonly withId: number;
                readonly ready: boolean;
                readonly done: boolean;
                readonly failed: boolean;
                readonly running: boolean;
            };
            run(amount: number): void;
        };
    } & {
        setFetched(count: number): void;
        add({ address, transfers, count, }: {
            address: string;
            transfers: ITransferItem[];
            count: number;
        }): void;
        upsert(address: string, transfer: ITransferItem): void;
        update(address: string, transfer: {
            id: string;
            state: EthTransferResponseDto['state'];
            txid?: string;
        }): void;
        delete(address: string, id: string): void;
        remove(address: string, filter: (item: ITransferItem) => boolean): ITransferItem[];
        clear(): void;
    } & {
        readonly list: (number | [any] | ((() => string) & (() => string)) | (() => IterableIterator<{
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | (() => void) | ((key: string) => boolean) | ((callbackfn: (value: {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, key: string, map: import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) => void, thisArg?: any) => void) | ((key: string) => ({
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined) | ((key: string) => boolean) | ((key: string, value: import("mobx-state-tree/dist/internal").ExtractCSTWithSTN<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((value: import("mobx-state-tree/dist/internal").ExtractCSTWithSTN<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | (() => IterableIterator<string>) | (() => IterableIterator<[string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>]>) | ((other: any) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((values: any) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | (() => import("mobx").IKeyValueMap<import("mobx-state-tree").ModelSnapshotType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }>>) | (() => import("mobx").IKeyValueMap<import("mobx-state-tree").ModelSnapshotType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }>>) | (() => Map<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((listener: (changes: import("mobx").IMapDidChange<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) => void, fireImmediately?: boolean | undefined) => import("mobx").Lambda) | ((handler: import("mobx").IInterceptor<import("mobx").IMapWillChange<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>>) => import("mobx").Lambda) | [import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>] | undefined)[];
        readonly activeCount: number;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    approvedCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    } & {
        amount: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        contractAddress: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    } & {
        prepare(contractAddress: string): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    depositCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    } & {
        from: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        to: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        publicSalt: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        privateSalt: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        secretHash: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        message: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    } & {
        prepare(params: DepositCmdParams): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    retrieveCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    } & {
        prepare(params: RetrieveCmdParams): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    collectCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        key: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    } & {
        prepare(params: CollectCmdParams): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    connectCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    } & {
        connector: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        isConnected: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    } & {
        prepare(connector: Connectors | undefined): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    disconnectCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    } & {
        prepare(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    safeTransferMap: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        synced: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        feesFormula: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        rewardFormula: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        fees: (_value: string) => "0";
        reward: (_value: string, _stakingValue: string, _fees: string) => "0";
    } & {
        setData(data: ISafeTransferItem): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    stakingMap: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        balance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        setData({ address }: IStakingItem): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    kiroTokenMap: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        setData({ address }: IKiroTokenItem): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    ERC20TokensMap: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        map: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            name: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            balance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            rate: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            readonly tokenBalance: string;
        } & {
            setData({ address, name, symbol, decimals, balance }: IERC20TokenItem): void;
            setBalance(balance: string): void;
            clearBalance(): void;
            setRate(rate: number): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }, {
        readonly list: ({
            address: string;
            name: string;
            symbol: string;
            decimals: number;
            balance: string;
            rate: number;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly tokenBalance: string;
        } & {
            setData({ address, name, symbol, decimals, balance }: IERC20TokenItem): void;
            setBalance(balance: string): void;
            clearBalance(): void;
            setRate(rate: number): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            name: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            balance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            rate: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            readonly tokenBalance: string;
        } & {
            setData({ address, name, symbol, decimals, balance }: IERC20TokenItem): void;
            setBalance(balance: string): void;
            clearBalance(): void;
            setRate(rate: number): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    } & {
        addToken({ address, name, symbol, decimals, balance, rate, }: IERC20TokenItem): void;
        setBalance(address: string, balance: string): void;
        clearBalances(): void;
        setRate(address: string, rate: number): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    currency: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        balance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        rate: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        readonly tokenBalance: string;
    } & {
        setData({ address, name, symbol, decimals, balance }: IERC20TokenItem): void;
        setBalance(balance: string): void;
        clearBalance(): void;
        setRate(rate: number): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    desiredCurrency: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        balance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        rate: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        readonly tokenBalance: string;
    } & {
        setData({ address, name, symbol, decimals, balance }: IERC20TokenItem): void;
        setBalance(balance: string): void;
        clearBalance(): void;
        setRate(rate: number): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    deviceInfo: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        isMobile: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        haveMetaMask: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        ethereumProvider: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        loggedIn: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    }, {
        setData({ isMobile, haveMetaMask, ethereumProvider, loggedIn, }: DeviceInfoData): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    left: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    factor: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    maxRewards: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    gasPriceMap: import("mobx-state-tree").IMapType<import("mobx-state-tree").ISimpleType<string>>;
    safeSwapMap: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        synced: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        feesFormula: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        rewardFormula: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        fees: (_value: string) => "0";
        reward: (_value: string, _stakingValue: string, _fees: string) => "0";
    } & {
        setData(data: ISafeTransferItem): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    canGetRewards: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    swapDepositCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    } & {
        from: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        to: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        desiredValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        publicSalt: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        privateSalt: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        secretHash: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        message: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    } & {
        prepare(params: swapDepositCmdParams): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    swaps: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        map: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        count: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        fetched: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        fetchCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            }, {
                clear(): void;
                prepared(): void;
                started(): void;
                finished(err?: {
                    err: {
                        message: string;
                    };
                } | undefined): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        } & {
            list: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            amount: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            start(): void;
            done(): void;
            failed({ message }: {
                message: string;
            }): void;
            clearErrors(): void;
            clear(): void;
        } & {
            prepare(params: FetchCmdParams): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        readonly list: ({
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
        readonly fetch: {
            readonly is: {
                readonly withFailMessage: string;
                readonly withId: number;
                readonly ready: boolean;
                readonly done: boolean;
                readonly failed: boolean;
                readonly running: boolean;
            };
            run(amount: number): void;
        };
    } & {
        setFetched(count: number): void;
        add({ address, transfers, count, }: {
            address: string;
            transfers: ITransferItem[];
            count: number;
        }): void;
        upsert(address: string, transfer: ITransferItem): void;
        update(address: string, transfer: {
            id: string;
            state: EthTransferResponseDto['state'];
            txid?: string;
        }): void;
        delete(address: string, id: string): void;
        remove(address: string, filter: (item: ITransferItem) => boolean): ITransferItem[];
        clear(): void;
    } & {
        readonly list: (number | [any] | ((() => string) & (() => string)) | (() => IterableIterator<{
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | (() => void) | ((key: string) => boolean) | ((callbackfn: (value: {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, key: string, map: import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) => void, thisArg?: any) => void) | ((key: string) => ({
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined) | ((key: string) => boolean) | ((key: string, value: import("mobx-state-tree/dist/internal").ExtractCSTWithSTN<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((value: import("mobx-state-tree/dist/internal").ExtractCSTWithSTN<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | (() => IterableIterator<string>) | (() => IterableIterator<[string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>]>) | ((other: any) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((values: any) => import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | (() => import("mobx").IKeyValueMap<import("mobx-state-tree").ModelSnapshotType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }>>) | (() => import("mobx").IKeyValueMap<import("mobx-state-tree").ModelSnapshotType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }>>) | (() => Map<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) | ((listener: (changes: import("mobx").IMapDidChange<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>) => void, fireImmediately?: boolean | undefined) => import("mobx").Lambda) | ((handler: import("mobx").IInterceptor<import("mobx").IMapWillChange<string, {
            id: string;
            txid: string;
            from: string;
            to: string;
            value: string;
            fees: string;
            salt: string;
            secretHash: string;
            state: "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown";
            updatedAt: Date & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<number | Date, number, Date>>;
            confirmedBlock: number;
            message: string;
            token: {
                address: string;
                decimals: number;
                symbol: string;
                type: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
            swap: {
                value: string;
                token: {
                    address: string;
                    decimals: number;
                    symbol: string;
                    type: string;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
                fees: string;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>>) => import("mobx").Lambda) | [import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            txid: import("mobx-state-tree").ISimpleType<string>;
            from: import("mobx-state-tree").ISimpleType<string>;
            to: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
            fees: import("mobx-state-tree").ISimpleType<string>;
            salt: import("mobx-state-tree").ISimpleType<string>;
            secretHash: import("mobx-state-tree").ISimpleType<string>;
            state: import("mobx-state-tree").IType<"waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown", "waiting-for-deposit" | "retrieving" | "retrieved" | "ready" | "collecting" | "collected" | "swapping" | "swapped" | "rejected" | "invalid" | "new" | "creating" | "unknown">;
            updatedAt: import("mobx-state-tree").IType<number | Date, number, Date>;
            confirmedBlock: import("mobx-state-tree").ISimpleType<number>;
            message: import("mobx-state-tree").ISimpleType<string>;
            token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
            swap: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                token: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
                    address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                    symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
                fees: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
        }, {
            update(state: EthTransferResponseDto["state"], txid?: string | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>] | undefined)[];
        readonly activeCount: number;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    swapRetrieveCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    } & {
        prepare(params: RetrieveCmdParams): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    swapCmd: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        is: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            ready: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            running: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            done: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            failed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            withFailMessage: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            withId: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        }, {
            clear(): void;
            prepared(): void;
            started(): void;
            finished(err?: {
                err: {
                    message: string;
                };
            } | undefined): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        key: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        start(): void;
        done(): void;
        failed({ message }: {
            message: string;
        }): void;
        clearErrors(): void;
        clear(): void;
    } & {
        prepare(params: CollectCmdParams): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    swapperAddress: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<string, string, string>, [undefined]>;
    swapperBalance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    formType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
}, {
    readonly retrieve: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run({ id }: {
            id: string;
        }): void;
        readonly data: {
            readonly id: string;
        };
    };
    readonly swapRetrieve: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run({ id }: {
            id: string;
        }): void;
        readonly data: {
            readonly id: string;
        };
    };
    readonly deposit: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run({ to, value, passcode, message, }: {
            to: string;
            value: string;
            passcode: string;
            message?: string | undefined;
        }): void;
        readonly data: {
            readonly from: string;
            readonly to: string;
            readonly value: string;
            readonly publicSalt: string;
            readonly privateSalt: string;
            readonly secretHash: string;
            readonly message: string;
        };
    };
    readonly swapDeposit: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run({ to, value, desiredValue, passcode, message, }: {
            to: string;
            value: string;
            desiredValue: string;
            passcode: string;
            message?: string | undefined;
        }): void;
        readonly data: {
            readonly from: string;
            readonly to: string;
            readonly value: string;
            readonly desiredValue: string;
            readonly publicSalt: string;
            readonly privateSalt: string;
            readonly secretHash: string;
            readonly message: string;
        };
    };
    readonly collect: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run({ id, passcode }: {
            id: string;
            passcode: string;
        }): void;
        readonly data: {
            readonly id: string;
            readonly key: string;
        };
    };
    readonly swap: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run({ id, passcode }: {
            id: string;
            passcode: string;
        }): void;
        readonly data: {
            readonly id: string;
            readonly key: string;
        };
    };
    readonly approve: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run(contractAddress: string): void;
        readonly data: {
            readonly contractAddress: string;
        };
    };
    readonly connect: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run(connector: Connectors): void;
        readonly data: {
            readonly isConnected: boolean;
            readonly connector: string;
        };
    };
    readonly disconnect: {
        readonly is: {
            readonly withFailMessage: string;
            readonly withId: number;
            readonly ready: boolean;
            readonly done: boolean;
            readonly failed: boolean;
            readonly running: boolean;
        };
        run(): void;
    };
    readonly safeTransferContract: ({
        address: string;
        synced: boolean;
        feesFormula: string;
        rewardFormula: string;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        fees: (_value: string) => "0";
        reward: (_value: string, _stakingValue: string, _fees: string) => "0";
    } & {
        setData(data: ISafeTransferItem): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        synced: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        feesFormula: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        rewardFormula: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        fees: (_value: string) => "0";
        reward: (_value: string, _stakingValue: string, _fees: string) => "0";
    } & {
        setData(data: ISafeTransferItem): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
    readonly safeSwapContract: ({
        address: string;
        synced: boolean;
        feesFormula: string;
        rewardFormula: string;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        fees: (_value: string) => "0";
        reward: (_value: string, _stakingValue: string, _fees: string) => "0";
    } & {
        setData(data: ISafeTransferItem): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        synced: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        feesFormula: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        rewardFormula: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        fees: (_value: string) => "0";
        reward: (_value: string, _stakingValue: string, _fees: string) => "0";
    } & {
        setData(data: ISafeTransferItem): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
    readonly kiroTokenContract: ({
        address: string;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setData({ address }: IKiroTokenItem): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        setData({ address }: IKiroTokenItem): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
    readonly ERC20TokensContract: ({
        address: string;
        name: string;
        symbol: string;
        decimals: number;
        balance: string;
        rate: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly tokenBalance: string;
    } & {
        setData({ address, name, symbol, decimals, balance }: IERC20TokenItem): void;
        setBalance(balance: string): void;
        clearBalance(): void;
        setRate(rate: number): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        balance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        rate: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        readonly tokenBalance: string;
    } & {
        setData({ address, name, symbol, decimals, balance }: IERC20TokenItem): void;
        setBalance(balance: string): void;
        clearBalance(): void;
        setRate(rate: number): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly stakingContract: ({
        address: string;
        balance: string;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setData({ address }: IStakingItem): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        balance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    }, {
        setData({ address }: IStakingItem): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
    readonly gasPrice: string;
    approvedToken(symbol: string, amount: string): boolean;
    transferFees(amount: string): "" | "0";
    transferReward(amount: string, fees: string): number | "";
    ERC20TokenList(chainName: string): ({
        address: string;
        name: string;
        symbol: string;
        decimals: number;
        balance: string;
        rate: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly tokenBalance: string;
    } & {
        setData({ address, name, symbol, decimals, balance }: IERC20TokenItem): void;
        setBalance(balance: string): void;
        clearBalance(): void;
        setRate(rate: number): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        address: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        symbol: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        decimals: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        balance: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        rate: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        readonly tokenBalance: string;
    } & {
        setData({ address, name, symbol, decimals, balance }: IERC20TokenItem): void;
        setBalance(balance: string): void;
        clearBalance(): void;
        setRate(rate: number): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
} & {
    setCanGetRewards(canGetRewards: boolean): void;
    setFormType(formType: string): void;
    setAddress(address: string): void;
    setActive(newActive: boolean): void;
    setChainId(chainId: number): void;
    setBalance(balance: string): void;
    setTokenBalance(balance: string): void;
    setStakingBalance(balance: string): void;
    setBlock(block: number): void;
    setRate(newRate: number): void;
    setCurrency(currency: ERC20TokenItem): void;
    setDesiredCurrency(currency: ERC20TokenItem): void;
    setCurrencyBalance(balance: string): void;
    setAllowance(allowance: string): void;
    setDeviceInfo(deviceInfo: DeviceInfoData): void;
    setSafeTransferContract(chainName: string, data: ISafeTransferItem): void;
    setSafeSwapContract(chainName: string, data: ISafeTransferItem): void;
    setStakingContract(chainName: string, data: IStakingItem): void;
    setKiroTokenContract(chainName: string, data: IKiroTokenItem): void;
    setERC20TokenContract(chainName: string, data: Array<ERC20TokenItem>): void;
    setERC20TokenBalance(chainName: string, address: string, balance: string): void;
    setErc20TokenRate(chainName: string, address: string, rate: number): void;
    clearERC20TokenBalances(chainName?: string | undefined): void;
    setRewardsParams(factor: number, left: number): void;
    setMaxRewards(maxRewards: number): void;
    setGasPrice(chainName: string, gasPrice: string): void;
    setSwapperAddress(address: string): void;
    setSwapperBalance(balance: string): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare const accountStore: IAccount;
declare type MobxClearAccount = Omit<Instance<typeof Account>, symbol | "currency" | "wallet" | "deviceInfo" | "ERC20TokensMap" | "safeTransferMap" | "kiroTokenMap" | "stakingMap" | keyof ICommands | keyof ILists | keyof IViews>;
export interface ILists {
    transfers: ITransferItems;
    incoming: ITransferItems;
    outgoing: ITransferItems;
}
export interface ICommands {
    approvedCmd: IApprovedCmd;
    depositCmd: IDepositCmd;
    retrieveCmd: IRetrieveCmd;
    collectCmd: ICollectCmd;
    connectCmd: IConnectCmd;
    disconnectCmd: IDisconnectCmd;
}
export interface IViews {
    safeTransferContract: ISafeTransfer | undefined;
    stakingContract: IStaking | undefined;
    kiroTokenContract: IKiroToken | undefined;
    ERC20TokensContract: IERC20TokenItem[];
    getERC20TokenList: (chainName: string) => IERC20TokenItem[];
    gasPriceMap: Map<string, string>;
}
export interface IAccount extends MobxClearAccount, ILists, ICommands, IViews {
    wallet: IWallet;
    currency: IERC20TokenItem;
    deviceInfo: IDeviceInfo;
    safeTransferMap: Map<string, ISafeTransfer>;
    stakingMap: Map<string, IStaking>;
    kiroTokenMap: Map<string, IKiroToken>;
    ERC20TokensMap: Map<string, IERC20TokenItem>;
}
declare type MobxClearTransferItems = Omit<Instance<typeof Transfers>, symbol | "list" | "fetchCmd" | "map">;
export interface ITransferItems extends MobxClearTransferItems {
    list: ITransfer[];
    fetchCmd: IFetchCmd;
    map: Map<string, ITransfer>;
}
export {};

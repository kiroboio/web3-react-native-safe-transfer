"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatCurrencyValue = exports.weiToCurrencyValue = exports.currencyValueToWei = void 0;
var numeral_1 = __importDefault(require("numeral"));
var web3_1 = __importDefault(require("web3"));
/**
 * convert crypto `value`(ethereum coin or token) to wei depends on `decimals` amount (default 18)
 * ```
 * const { currency } = useAccount()
 * currencyValueToWei(value, currency.decimals)
 * ```
*/
var currencyValueToWei = function (value, decimals) {
    var _a;
    if ((value === null || value === void 0 ? void 0 : value.toString()) && decimals) {
        var val = value.toString();
        var _b = val.split("."), whole = _b[0], fraction = _b[1];
        if (!whole)
            whole = "0";
        if (!fraction)
            fraction = "0";
        while (fraction.length < decimals)
            fraction += "0";
        var toBN = web3_1.default.utils.toBN;
        var wei = toBN(whole)
            .mul(toBN(+("1e" + decimals)))
            .add(toBN(fraction));
        return (_a = toBN(wei === null || wei === void 0 ? void 0 : wei.toString())) === null || _a === void 0 ? void 0 : _a.toString();
    }
    return web3_1.default.utils.toWei((value === null || value === void 0 ? void 0 : value.toString()) || "0", "ether");
};
exports.currencyValueToWei = currencyValueToWei;
/**
 * wei `value` to crypto (ethereum coin or token) depends on `decimals` amount (default 18)
*/
var weiToCurrencyValue = function (value, decimals) {
    var _a, _b;
    if (!decimals)
        return web3_1.default.utils.fromWei("" + value, "ether");
    var toBN = web3_1.default.utils.toBN;
    var wei = toBN(value);
    var base = toBN(+("1e" + decimals));
    var fraction = (_a = wei.mod(base)) === null || _a === void 0 ? void 0 : _a.toString(10);
    while (fraction.length < decimals)
        fraction = "0" + fraction;
    return "" + ((_b = wei.div(base)) === null || _b === void 0 ? void 0 : _b.toString()) + (fraction === "0" ? "" : "." + fraction);
};
exports.weiToCurrencyValue = weiToCurrencyValue;
/**
 * format currency value to readable format
 * ```
 * formatCurrencyValue(value, '0,0.[00000]' )
 * ```
*/
var formatCurrencyValue = function (value, format // '0,0.0[00000]'
) {
    if (!format) {
        var val = typeof value === "number" ? value : parseFloat(value);
        var precision = val > 0 ? Math.max(0, Math.log(val) / Math.LN10 + 1 + 1e-15) : 0;
        if (precision < 6)
            format = "0,0.0[" + "0".repeat(6 - precision) + "]";
        else
            format = "0,0";
    }
    var formattedEther = numeral_1.default(value).format(format);
    if (formattedEther === "NaN")
        return "" + value;
    return formattedEther;
};
exports.formatCurrencyValue = formatCurrencyValue;
var ethereum = {
    weiToCurrencyValue: exports.weiToCurrencyValue,
    currencyValueToWei: exports.currencyValueToWei,
    formatCurrencyValue: exports.formatCurrencyValue,
};
exports.default = ethereum;

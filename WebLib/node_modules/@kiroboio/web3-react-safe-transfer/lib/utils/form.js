"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.yup = void 0;
var web3_1 = __importDefault(require("web3"));
var account_1 = require("../context/account");
var ethereum_1 = require("./ethereum");
var yup = __importStar(require("yup"));
exports.yup = yup;
var string = yup.string, number = yup.number;
yup.addMethod(string, 'emptyAsUndefined', function () {
    return this.transform(function (value) { return (value ? value : undefined); });
});
yup.addMethod(number, 'emptyAsUndefined', function () {
    return this.transform(function (value, originalValue) { var _a; return ((_a = String(originalValue)) === null || _a === void 0 ? void 0 : _a.trim()) ? value : undefined; });
});
/**
 * ```
 * const validationSchema = object().shape({
    to: yupString()
      .trim()
      .required(t('required'))
      .ethereumAddress(t('validEthereumAddressErr'))
  })```
 */
yup.addMethod(string, 'ethereumAddress', function (errorMessage) {
    return this.test("test-ethereum-address", errorMessage, function (value) {
        var _a = this, path = _a.path, createError = _a.createError;
        var illegalAddresses = [
            '0x0000000000000000000000000000000000000000',
            '0xb1191f691a355b43542bea9b8847bc73e7abb137'
        ];
        return ((value && (value === null || value === void 0 ? void 0 : value.slice(0, 2)) === '0x' && web3_1.default.utils.isAddress(value) && !illegalAddresses.includes(value)) ||
            createError({ path: path, message: errorMessage }));
    });
});
yup.addMethod(string, 'ether', function (min, minErrorMessage, maxErrorMessage) {
    var _a = account_1.useAccount(), currency = _a.currency, balance = _a.balance, tokenBalance = _a.tokenBalance, transferFees = _a.transferFees;
    return this.test("test-ether", 'ether failed', function (value) {
        var _a = this, path = _a.path, createError = _a.createError;
        value = value || '0';
        var decimal = value.indexOf('.');
        if (decimal > 0)
            value = value.substr(0, decimal + 19);
        var toBN = web3_1.default.utils.toBN;
        var weiValue = toBN(ethereum_1.currencyValueToWei(value, currency.decimals || 18));
        var weiMin = toBN(min);
        if (value && weiValue.lt(weiMin)) {
            return createError({ path: path, message: minErrorMessage });
        }
        if (currency.symbol === 'ETH') {
            var fees = toBN(transferFees(value).toString());
            weiValue = weiValue.add(fees);
        }
        var weiMax = toBN(currency.symbol === 'ETH' ? balance : tokenBalance);
        if (value && weiValue.gt(weiMax)) {
            return createError({
                path: path,
                message: maxErrorMessage + " " + currency.symbol,
            });
        }
        return true;
    });
});
yup.addMethod(string, 'desiredCurrency', function (min, minErrorMessage) {
    return this.test("test-ether", 'ether failed', function (value) {
        var _a = this, path = _a.path, createError = _a.createError;
        value = value || '0';
        var decimal = value.indexOf('.');
        if (decimal > 0)
            value = value.substr(0, decimal + 19);
        var toBN = web3_1.default.utils.toBN;
        var weiValue = toBN(ethereum_1.currencyValueToWei(value));
        var weiMin = toBN(min);
        if (value && weiValue.lt(weiMin)) {
            return createError({ path: path, message: minErrorMessage });
        }
        return true;
    });
});

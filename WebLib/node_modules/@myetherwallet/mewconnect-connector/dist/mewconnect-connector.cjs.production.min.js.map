{"version":3,"file":"mewconnect-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import {ConnectorUpdate} from '@web3-react/types'\nimport {AbstractConnector} from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface MewConnectConnectorArguments {\n    url: string;\n    infuraId?: string | undefined;\n    windowClosedError?: boolean | undefined;\n    subscriptionNotFoundNoThrow?: boolean | undefined;\n}\n\ninterface MewConnectProviderOptions {\n    chainId: string | number | undefined;\n    noUrlCheck: boolean;\n    rpcUrl: string |  undefined;\n    infuraId: string | undefined;\n    windowClosedError: boolean | undefined;\n    subscriptionNotFoundNoThrow: boolean | undefined;\n}\n\nexport class MewConnectConnector extends AbstractConnector {\n    public mewConnect: any\n    private readonly url: string\n    private provider: any\n    private readonly windowClosedError : boolean | undefined;\n    private readonly subscriptionNotFoundNoThrow : boolean | undefined;\n    private readonly infuraId : string | undefined;\n\n    constructor(args : MewConnectConnectorArguments) {\n        super({supportedChainIds: [CHAIN_ID]})\n        const {url, windowClosedError, subscriptionNotFoundNoThrow , infuraId} = args;\n        this.url = url\n        this.windowClosedError = windowClosedError || true;\n        this.subscriptionNotFoundNoThrow =\n            subscriptionNotFoundNoThrow || true;\n        this.infuraId = infuraId;\n    }\n\n    public async activate(): Promise<ConnectorUpdate> {\n        const {default: MewConnect} = await import('@myetherwallet/mewconnect-web-client')\n        let account;\n        if (!MewConnect.Provider.isConnected) {\n            const options: MewConnectProviderOptions  = {\n                chainId: CHAIN_ID,\n                noUrlCheck: true,\n                rpcUrl: undefined,\n                infuraId: this.infuraId,\n                windowClosedError: this.windowClosedError,\n                subscriptionNotFoundNoThrow: this.subscriptionNotFoundNoThrow\n            };\n\n            if (this.url.includes('https://mainnet.infura.io/v3/') && !options.infuraId) {\n                options.infuraId = this.url.replace('https://mainnet.infura.io/v3/', '')\n            } else {\n                options.rpcUrl = this.url;\n            }\n\n            this.mewConnect = new MewConnect.Provider(options);\n            // Requires the use of websockets.\n            this.provider = this.mewConnect.makeWeb3Provider()\n            this.mewConnect.on('disconnected', () => {\n                this.emitDeactivate();\n            })\n\n            account = await this.mewConnect\n                .enable()\n                .catch(() => {\n                    throw new Error('The user rejected the request.');\n                })\n                .then((accounts: string[]): string => accounts[0]);\n            return {provider: this.provider, chainId: CHAIN_ID, account: account}\n        } else if (this.mewConnect) {\n            account = await this.mewConnect\n                .enable()\n                .catch(() => {\n                    throw new Error('The user rejected the request.');\n                })\n                .then((accounts: string[]): string => accounts[0]);\n\n            return {provider: this.provider, chainId: CHAIN_ID, account: account}\n        }\n\n        // const account = await this.mewConnect.enable().then((accounts: string[]): string => accounts[0])\n\n        return {provider: this.provider, chainId: CHAIN_ID, account: account}\n    }\n\n    public async getProvider(): Promise<any> {\n        return this.provider\n    }\n\n    public async getChainId(): Promise<number> {\n        return CHAIN_ID\n    }\n\n    public async getAccount(): Promise<null | string> {\n        return this.provider.send('eth_accounts')\n            .then((accounts: string[]): string => accounts[0])\n            .catch(() => {\n                throw new Error('No account present to get.');\n            })\n    }\n\n    public deactivate() {\n        if (this.provider) {\n            this.provider.close()\n        }\n        this.emitDeactivate()\n    }\n\n    public async close() {\n        if (this.provider) {\n            this.provider.close()\n        }\n        this.emitDeactivate()\n    }\n}\n"],"names":["args","supportedChainIds","windowClosedError","subscriptionNotFoundNoThrow","infuraId","url","activate","MewConnect","Provider","isConnected","options","chainId","noUrlCheck","rpcUrl","undefined","this","includes","replace","mewConnect","provider","makeWeb3Provider","on","_this2","emitDeactivate","enable","Error","then","accounts","account","getProvider","getChainId","getAccount","send","deactivate","close","AbstractConnector"],"mappings":"6yBA6BgBA,uBACF,CAACC,kBAAmB,CA3BjB,eA4BGC,EAA6DF,EAA7DE,kBAAmBC,EAA0CH,EAA1CG,4BAA8BC,EAAYJ,EAAZI,kBACxDC,IADoEL,EAAlEK,MAEFH,kBAAoBA,IAAqB,IACzCC,4BACDA,IAA+B,IAC9BC,SAAWA,sHAGPE,oCAAN,6GACiC,qCAAO,wDAA3BC,kBAEAC,SAASC,oCACfC,EAAsC,CACxCC,QAzCC,EA0CDC,YAAY,EACZC,YAAQC,EACRV,SAAUW,KAAKX,SACfF,kBAAmBa,KAAKb,kBACxBC,4BAA6BY,KAAKZ,6BAGlCY,KAAKV,IAAIW,SAAS,mCAAqCN,EAAQN,SAC/DM,EAAQN,SAAWW,KAAKV,IAAIY,QAAQ,gCAAiC,IAErEP,EAAQG,OAASE,KAAKV,SAGrBa,WAAa,IAAIX,EAAWC,SAASE,QAErCS,SAAWJ,KAAKG,WAAWE,wBAC3BF,WAAWG,GAAG,gBAAgB,WAC/BC,EAAKC,8BAGOR,KAAKG,WAChBM,gBACM,iBACG,IAAIC,MAAM,qCAEnBC,MAAK,SAACC,UAA+BA,EAAS,uCAC5C,CAACR,SAAUJ,KAAKI,SAAUR,QApE5B,EAoE+CiB,QANpDA,uBAOOb,KAAKG,6CACIH,KAAKG,WAChBM,gBACM,iBACG,IAAIC,MAAM,qCAEnBC,MAAK,SAACC,UAA+BA,EAAS,uCAE5C,CAACR,SAAUJ,KAAKI,SAAUR,QA7E5B,EA6E+CiB,QAPpDA,4CAYG,CAACT,SAAUJ,KAAKI,SAAUR,QAlFxB,EAkF2CiB,QAASA,4GAGpDC,uCAAN,qGACId,KAAKI,iHAGHW,sCAAN,qGAzFM,qGA6FAC,sCAAN,qGACIhB,KAAKI,SAASa,KAAK,gBACrBN,MAAK,SAACC,UAA+BA,EAAS,aACxC,iBACG,IAAIF,MAAM,yIAIrBQ,WAAA,WACClB,KAAKI,eACAA,SAASe,aAEbX,oBAGIW,iCAAN,4EACCnB,KAAKI,eACAA,SAASe,aAEbX,yHA9F4BY"}
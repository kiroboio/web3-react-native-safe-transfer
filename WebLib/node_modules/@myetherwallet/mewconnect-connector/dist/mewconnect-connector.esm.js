import _regeneratorRuntime from 'regenerator-runtime';
import { AbstractConnector } from '@web3-react/abstract-connector';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var CHAIN_ID = 1;
var MewConnectConnector = /*#__PURE__*/function (_AbstractConnector) {
  _inheritsLoose(MewConnectConnector, _AbstractConnector);

  function MewConnectConnector(args) {
    var _this;

    _this = _AbstractConnector.call(this, {
      supportedChainIds: [CHAIN_ID]
    }) || this;
    var url = args.url,
        windowClosedError = args.windowClosedError,
        subscriptionNotFoundNoThrow = args.subscriptionNotFoundNoThrow,
        infuraId = args.infuraId;
    _this.url = url;
    _this.windowClosedError = windowClosedError || true;
    _this.subscriptionNotFoundNoThrow = subscriptionNotFoundNoThrow || true;
    _this.infuraId = infuraId;
    return _this;
  }

  var _proto = MewConnectConnector.prototype;

  _proto.activate = /*#__PURE__*/function () {
    var _activate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var _this2 = this;

      var _yield$import, MewConnect, account, options;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return import('@myetherwallet/mewconnect-web-client');

            case 2:
              _yield$import = _context.sent;
              MewConnect = _yield$import["default"];

              if (MewConnect.Provider.isConnected) {
                _context.next = 16;
                break;
              }

              options = {
                chainId: CHAIN_ID,
                noUrlCheck: true,
                rpcUrl: undefined,
                infuraId: this.infuraId,
                windowClosedError: this.windowClosedError,
                subscriptionNotFoundNoThrow: this.subscriptionNotFoundNoThrow
              };

              if (this.url.includes('https://mainnet.infura.io/v3/') && !options.infuraId) {
                options.infuraId = this.url.replace('https://mainnet.infura.io/v3/', '');
              } else {
                options.rpcUrl = this.url;
              }

              this.mewConnect = new MewConnect.Provider(options); // Requires the use of websockets.

              this.provider = this.mewConnect.makeWeb3Provider();
              this.mewConnect.on('disconnected', function () {
                _this2.emitDeactivate();
              });
              _context.next = 12;
              return this.mewConnect.enable()["catch"](function () {
                throw new Error('The user rejected the request.');
              }).then(function (accounts) {
                return accounts[0];
              });

            case 12:
              account = _context.sent;
              return _context.abrupt("return", {
                provider: this.provider,
                chainId: CHAIN_ID,
                account: account
              });

            case 16:
              if (!this.mewConnect) {
                _context.next = 21;
                break;
              }

              _context.next = 19;
              return this.mewConnect.enable()["catch"](function () {
                throw new Error('The user rejected the request.');
              }).then(function (accounts) {
                return accounts[0];
              });

            case 19:
              account = _context.sent;
              return _context.abrupt("return", {
                provider: this.provider,
                chainId: CHAIN_ID,
                account: account
              });

            case 21:
              return _context.abrupt("return", {
                provider: this.provider,
                chainId: CHAIN_ID,
                account: account
              });

            case 22:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function activate() {
      return _activate.apply(this, arguments);
    }

    return activate;
  }();

  _proto.getProvider = /*#__PURE__*/function () {
    var _getProvider = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.provider);

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getProvider() {
      return _getProvider.apply(this, arguments);
    }

    return getProvider;
  }();

  _proto.getChainId = /*#__PURE__*/function () {
    var _getChainId = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", CHAIN_ID);

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function getChainId() {
      return _getChainId.apply(this, arguments);
    }

    return getChainId;
  }();

  _proto.getAccount = /*#__PURE__*/function () {
    var _getAccount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this.provider.send('eth_accounts').then(function (accounts) {
                return accounts[0];
              })["catch"](function () {
                throw new Error('No account present to get.');
              }));

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getAccount() {
      return _getAccount.apply(this, arguments);
    }

    return getAccount;
  }();

  _proto.deactivate = function deactivate() {
    if (this.provider) {
      this.provider.close();
    }

    this.emitDeactivate();
  };

  _proto.close = /*#__PURE__*/function () {
    var _close = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (this.provider) {
                this.provider.close();
              }

              this.emitDeactivate();

            case 2:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function close() {
      return _close.apply(this, arguments);
    }

    return close;
  }();

  return MewConnectConnector;
}(AbstractConnector);

export { MewConnectConnector };
//# sourceMappingURL=mewconnect-connector.esm.js.map

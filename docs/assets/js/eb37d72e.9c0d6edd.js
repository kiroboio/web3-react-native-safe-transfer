(self.webpackChunkweb_lib=self.webpackChunkweb_lib||[]).push([[9450],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),f=l(n),d=a,m=f["".concat(c,".").concat(d)]||f[d]||u[d]||i;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=f;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2842:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return f}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),s=["components"],o={id:"index",title:"web-lib",slug:"/Guides/actions",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},c=void 0,l={unversionedId:"Guides/actions/index",id:"Guides/actions/index",isDocsHomePage:!1,title:"web-lib",description:"Transfer Actions",source:"@site/docs/Guides/actions/index.md",sourceDirName:"Guides/actions",slug:"/Guides/actions",permalink:"/web3-lib/docs/Guides/actions",editUrl:null,version:"current",sidebarPosition:0,frontMatter:{id:"index",title:"web-lib",slug:"/Guides/actions",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},sidebar:"notMyAutogeneratedSidebar",previous:{title:"Exports",permalink:"/web3-lib/docs/Guides/transfers/modules"},next:{title:"Exports",permalink:"/web3-lib/docs/Guides/actions/modules"}},p=[],u={toc:p};function f(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"transfer-actions"},"Transfer Actions"),(0,i.kt)("h5",{id:"retrieving"},"Retrieving"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export const List = observer(() => {\n  const {\n    retrieve,\n    swapRetrieve,\n    outgoing,\n    swaps,\n  } = useAccount()\n\n  const handleRetrieve = (transfer: ITransfer) => {\n      retrieve.run({ id: transfer.id })\n  }\n\n  const handleSwapRetrieve = (transfer: ITransfer) => {\n      swapRetrieve.run({ id: transfer.id })\n  }\n  return (\n    <div>\n        <Outgoing \n          transfers={outgoing.list.map((transfer: ITransfer) => <Transfer transfer={transfer} onRetrieve={handleRetrieve} /> )} \n        />\n        <Swaps \n          transfers={swaps.list.map((transfer: ITransfer) => <Transfer transfer={transfer} onRetrieve={handleSwapRetrieve} />)}\n        />\n    </div>\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/ILists"},"ILists"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/ITransfer"},"ITransfer"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/IAccount#retrieve"},"IRetrieve"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/IAccount#swapretrieve"},"ISwapRetrieve")))),(0,i.kt)("h5",{id:"collecting"},"Collecting"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export const List = observer(() => {\n  const {\n    collect,\n    swap,\n    incoming,\n  } = useAccount()\n\n  const handleCollect = (transfer: ITransfer, passcode: string) => {\n      if(transfer.swap?) {\n        return swap.run({ id: transfer.id, passcode })\n      }\n      return collect.run({ id: transfer.id, passcode })\n  }\n\n  return <Incoming transfers={incoming.list.map((transfer: ITransfer) => <Transfer transfer={transfer} onCollect={handleCollect} />} />\n   \n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/IAccount#collect"},"ICollect"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/IAccount#swap"},"ISwap")))),(0,i.kt)("h5",{id:"monitoring"},"Monitoring"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export const Statuses = observer(() => {\n  const {\n    collect,\n    swap,\n    retrieve,\n    swapRetrieve,\n  } = useAccount()\n\n  return (\n    <> \n      <Collect isRunning={collect.is.running} />\n      <Swap isRunning={swap.is.running} />\n    </>\n   \n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/IAccount#connect"},"IConnect"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/IAccount#disconnect"},"IDisconnect"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/IAccount#collect"},"ICollect"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/IAccount#deposit"},"IDeposit"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/IAccount#retrieve"},"IRetrieve"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/IAccount#swap"},"ISwap"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/IAccount#swapdeposit"},"ISwapDeposit"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("a",{href:"/docs/api/stores/interfaces/IAccount#swapretrieve"},"ISwapRetrieve")))))}f.isMDXComponent=!0}}]);
{"version":3,"file":"mewconnect-connector.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import {ConnectorUpdate} from '@web3-react/types'\nimport {AbstractConnector} from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface MewConnectConnectorArguments {\n    url: string;\n    infuraId?: string | undefined;\n    windowClosedError?: boolean | undefined;\n    subscriptionNotFoundNoThrow?: boolean | undefined;\n}\n\ninterface MewConnectProviderOptions {\n    chainId: string | number | undefined;\n    noUrlCheck: boolean;\n    rpcUrl: string |  undefined;\n    infuraId: string | undefined;\n    windowClosedError: boolean | undefined;\n    subscriptionNotFoundNoThrow: boolean | undefined;\n}\n\nexport class MewConnectConnector extends AbstractConnector {\n    public mewConnect: any\n    private readonly url: string\n    private provider: any\n    private readonly windowClosedError : boolean | undefined;\n    private readonly subscriptionNotFoundNoThrow : boolean | undefined;\n    private readonly infuraId : string | undefined;\n\n    constructor(args : MewConnectConnectorArguments) {\n        super({supportedChainIds: [CHAIN_ID]})\n        const {url, windowClosedError, subscriptionNotFoundNoThrow , infuraId} = args;\n        this.url = url\n        this.windowClosedError = windowClosedError || true;\n        this.subscriptionNotFoundNoThrow =\n            subscriptionNotFoundNoThrow || true;\n        this.infuraId = infuraId;\n    }\n\n    public async activate(): Promise<ConnectorUpdate> {\n        const {default: MewConnect} = await import('@myetherwallet/mewconnect-web-client')\n        let account;\n        if (!MewConnect.Provider.isConnected) {\n            const options: MewConnectProviderOptions  = {\n                chainId: CHAIN_ID,\n                noUrlCheck: true,\n                rpcUrl: undefined,\n                infuraId: this.infuraId,\n                windowClosedError: this.windowClosedError,\n                subscriptionNotFoundNoThrow: this.subscriptionNotFoundNoThrow\n            };\n\n            if (this.url.includes('https://mainnet.infura.io/v3/') && !options.infuraId) {\n                options.infuraId = this.url.replace('https://mainnet.infura.io/v3/', '')\n            } else {\n                options.rpcUrl = this.url;\n            }\n\n            this.mewConnect = new MewConnect.Provider(options);\n            // Requires the use of websockets.\n            this.provider = this.mewConnect.makeWeb3Provider()\n            this.mewConnect.on('disconnected', () => {\n                this.emitDeactivate();\n            })\n\n            account = await this.mewConnect\n                .enable()\n                .catch(() => {\n                    throw new Error('The user rejected the request.');\n                })\n                .then((accounts: string[]): string => accounts[0]);\n            return {provider: this.provider, chainId: CHAIN_ID, account: account}\n        } else if (this.mewConnect) {\n            account = await this.mewConnect\n                .enable()\n                .catch(() => {\n                    throw new Error('The user rejected the request.');\n                })\n                .then((accounts: string[]): string => accounts[0]);\n\n            return {provider: this.provider, chainId: CHAIN_ID, account: account}\n        }\n\n        // const account = await this.mewConnect.enable().then((accounts: string[]): string => accounts[0])\n\n        return {provider: this.provider, chainId: CHAIN_ID, account: account}\n    }\n\n    public async getProvider(): Promise<any> {\n        return this.provider\n    }\n\n    public async getChainId(): Promise<number> {\n        return CHAIN_ID\n    }\n\n    public async getAccount(): Promise<null | string> {\n        return this.provider.send('eth_accounts')\n            .then((accounts: string[]): string => accounts[0])\n            .catch(() => {\n                throw new Error('No account present to get.');\n            })\n    }\n\n    public deactivate() {\n        if (this.provider) {\n            this.provider.close()\n        }\n        this.emitDeactivate()\n    }\n\n    public async close() {\n        if (this.provider) {\n            this.provider.close()\n        }\n        this.emitDeactivate()\n    }\n}\n"],"names":["CHAIN_ID","MewConnectConnector","args","supportedChainIds","url","windowClosedError","subscriptionNotFoundNoThrow","infuraId","activate","MewConnect","Provider","isConnected","options","chainId","noUrlCheck","rpcUrl","undefined","includes","replace","mewConnect","provider","makeWeb3Provider","on","emitDeactivate","enable","Error","then","accounts","account","getProvider","getChainId","getAccount","send","deactivate","close","AbstractConnector"],"mappings":"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"}
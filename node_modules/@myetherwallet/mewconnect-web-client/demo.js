// const web3 = require('web3');
// var Web3WsProvider = require('web3-providers-ws');
// let message = 'ETH-A';
// // message = 'abcdefghij'
// const buf = Buffer.from(message).toString('hex');
// console.log(buf); // todo remove dev item
// var jwt = require('jsonwebtoken');
// const fetch = require('node-fetch');
// const fs = require('fs');
// const jsrassign = require('jsrsasign');
// // console.log(jsrassign.KJUR); // todo remove dev item
// const options = {
//   method: 'POST',
//   headers: {
//     alg: 'RS256',
//     typ: 'JWT',
//     kid: '204e821af71a464088034d439b642672'
//   },
//   body: {
//     exp: 1617736153,
//     aud: 'infura.io'
//   }
// };
//
//
//
// async function run() {
//   // sign with RSA SHA256
//   var privateKey = fs.readFileSync('private.pem');
//   var token = jwt.sign(
//     {
//       exp: Math.floor(Date.now() / 1000) + 60 * 60,
//       aud: 'infura.io'
//     },
//     privateKey,
//     {
//       algorithm: 'RS256',
//       keyid: '9dda06cf0959409885506820093c502f'
//     }
//   );
//
//   const body = {
//     exp: Math.floor(Date.now() / 1000) + 60 * 60,
//     aud: 'infura.io'
//   };
//   console.log(token); // todo remove dev item
//   const response = await fetch(
//     'https://mainnet.infura.io/v3/7d06294ad2bd432887eada360c5e1986',
//     {
//       method: 'post',
//       body: '{"jsonrpc":"2.0","method":"net_version","params":[],"id":0}',
//       headers: {
//         Accept: 'application/json, text/plain, */*',
//         'Content-Type': 'application/json',
//         Authorization: `Bearer ${token}`
//       }
//     }
//   );
//   console.log(response); // todo remove dev item
//   const json = await response.json();
//
//   console.log(json);
// }
// run();
// function run2() {
//   try {
//     var privateKey = fs.readFileSync('private.pem');
//
//     const KJUR = jsrassign.KJUR;
//     var prvKey = jsrassign.KEYUTIL.getKey(privateKey);
//     // Header
//     var oHeader = { alg: 'RS256', typ: 'JWT' };
//     // Payload
//     var oPayload = {};
//     var tNow = KJUR.jws.IntDate.get('now');
//     var tEnd = KJUR.jws.IntDate.get('now + 1day');
//     // oPayload.iss = "http://foo.com";
//     // oPayload.sub = "mailto:mike@foo.com";
//     // oPayload.nbf = tNow;
//     // oPayload.iat = tNow;
//     oPayload.exp = tEnd;
//     oPayload.jti = 'id123456';
//     oPayload.aud = 'infura.io';
//     // Sign JWT, password=616161
//     var sHeader = JSON.stringify(oHeader);
//     var sPayload = JSON.stringify(oPayload);
//     var sJWT = KJUR.jws.JWS.sign("RS256", sHeader, sPayload, prvKey);
//     console.log(sJWT); // todo remove dev item
//   } catch (e) {
//     // eslint-disable-next-line
//     console.error(e);
//   }
// }
// // run2();
//
// // const val = new Web3WsProvider('wss://mainnet.infura.io/ws/v3/7d06294ad2bd432887eada360c5e1986', options)
// // console.log(val); // todo remove dev item
// // const Web3 = new web3(val);
// // Web3.eth.getCoinbase()
// //   .then(console.log)
// //   .catch(console.error)
//
// /*// let signature = "f86580850826299e0082520894b3d1002f77c20a96477d4a41d60853f8b9786393808081e5a05967df4f0f1c7c67fba00dccab18fc3f3b1a8fa055aa0ce7455c9778eafaf634a017c886cd9c8ad3ff447f4565ad04f2b0b9a624f5deb7c22ba13a706d8544c9ef"
// // signature = signature.substr(2); //remove 0x
// // const r = '0x' + signature.slice(0, 64)
// // const s = '0x' + signature.slice(64, 128)
// // const v = '0x' + signature.slice(128, 130)
// // const v_decimal = web3.utils.toDecimal(v)
// // console.log(web3.utils.toDecimal('0xef')); // todo remove dev item
// // console.log(r,s,v, v_decimal)*/


makeWeb3Provider(
  CHAIN_ID = this.CHAIN_ID,
  RPC_URL = this.RPC_URL,
  _noCheck = this.noUrlCheck
) {
  let chainError = false;
  let web3Provider;
  try {
    if(window.ethereum && window.Trust){
      web3Provider = window.ethereum;
      state.enable = this.enable.bind(this);
      this.runningInApp = true;
    } else {
      const chain = this.identifyChain(CHAIN_ID || 1);
      const defaultNetwork = Networks[chain.key][0];
      state.network = defaultNetwork;
      if (this.infuraId && !this.RPC_URL) {
        RPC_URL = `wss://${chain.name}.infura.io/ws/v3/${this.infuraId}`;
      }
      const hostUrl = url.parse(RPC_URL || defaultNetwork.url);
      const options = {
        subscriptionNotFoundNoThrow: this.subscriptionNotFoundNoThrow
      };
      if (!/[wW]/.test(hostUrl.protocol)) {
        throw Error('websocket rpc endpoint required');
      }
      if (!_noCheck && !this.infuraId) {
        if (
          !hostUrl.hostname.includes(chain.name) &&
          hostUrl.hostname.includes('infura.io')
        ) {
          chainError = true;
          throw Error(
            `ChainId: ${CHAIN_ID} and infura endpoint ${hostUrl.hostname} don't match`
          );
        }
      }
      const parsedUrl = `${hostUrl.protocol}//${
        hostUrl.hostname ? hostUrl.hostname : hostUrl.host
      }${hostUrl.port ? ':' + hostUrl.port : ''}${
        hostUrl.pathname ? hostUrl.pathname : ''
      }`;

      // Attach Methods and Flags
      state.enable = this.enable.bind(this);
      web3Provider = new MEWProvider(
        parsedUrl,
        options,
        {
          state: state
        },
        eventHub
      );
    }


    web3Provider.close = this.disconnect.bind(this);
    web3Provider.disconnect = this.disconnect.bind(this);
    state.web3Provider = web3Provider;

    state.web3 = new Web3(web3Provider);
    state.web3.currentProvider.sendAsync = state.web3.currentProvider.send;
    this.setupListeners();
    web3Provider.enable = this.enable.bind(this);
    web3Provider.isMewConnect = true;
    web3Provider.isMEWconnect = true;
    web3Provider.name = 'MewConnect';
    return web3Provider;
  } catch (e) {
    debugErrors('makeWeb3Provider ERROR');
    if (chainError) {
      throw e;
    } else {
      // eslint-disable-next-line
      console.error(e);
    }
  }
}
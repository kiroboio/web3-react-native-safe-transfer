{"version":3,"file":"use-what-changed.cjs.production.min.js","sources":["../src/useWhatChanged.tsx"],"sourcesContent":["import React from 'react';\n\ntype TypeDependency = any[];\ntype TypeDependencyNames = string;\n\nlet what_debug_changed = 0;\n\nlet configuration = { active: true };\nfunction setUseWhatChange({ active = true }: any = {}) {\n  configuration = { ...configuration, active };\n}\n\n/**\n * Taken random color logic from some stackoverflow answer\n */\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n/**\n *\n * Check whether the dependency item is an object. then\n */\nconst isObject = (t: any) => {\n  return Object.prototype.toString.call(t) === '[object Object]';\n};\n\nfunction getPrintableInfo(dependencyItem: any) {\n  /**\n   * Printing the info into viewable format\n   */\n  if (isObject(dependencyItem) || Array.isArray(dependencyItem)) {\n    let ans;\n    try {\n      ans = JSON.stringify(dependencyItem, null, 2);\n    } catch (e) {\n      ans = 'CIRCULAR JSON';\n    }\n    return ans;\n  }\n\n  return dependencyItem;\n}\n\n// const isDevelopment = process.env['NODE_ENV'] === 'development';\n\nfunction useHotRefs(value: any) {\n  const fnRef = React.useRef(value);\n  React.useEffect(() => {\n    fnRef.current = value;\n  });\n\n  return fnRef;\n}\n\nfunction useWhatChanged(\n  dependency?: TypeDependency,\n  dependencyNames?: TypeDependencyNames,\n  suffix?: string,\n  hookName?: string\n) {\n  \n  // It's a fair assumption the hooks type will not change for a component during\n  // its life time\n  const hookNameFinal = React.useMemo(() => {\n\n   \n    if(hookName === \"useLayoutEffect\") {\n      return \"useLayoutEffect\"\n    }\n\n    // if(hookName === \"useEffect\" || !hookName) {\n      return \"useEffect\"\n    // }\n  }, [])\n  // This ref is responsible for book keeping of the old value\n  const dependencyRef = React.useRef(dependency);\n\n  // For count bookkeeping , for easy debugging\n  const whatChangedHookCountRef = React.useRef(1);\n\n  // For assigning color for easy debugging\n  const backgroundColorRef = React.useRef('');\n\n  let isDependencyArr = Array.isArray(dependencyRef.current);\n\n  React[hookNameFinal](() => {\n   \n      if (\n        dependencyRef.current &&\n        isDependencyArr\n        // dependencyRef.current.length > 0\n      ) {\n        what_debug_changed++;\n  \n        whatChangedHookCountRef.current = what_debug_changed;\n        backgroundColorRef.current = getRandomColor();\n      }\n   \n    // const MyWindow: IWindow = window;\n    \n  }, [dependencyRef, isDependencyArr]);\n\n  function postConsole() {\n    console.log('\\n');\n    console.log(\n      `%c///// END SECTION/////`,\n      `background: ${backgroundColorRef.current}; color: white; font-size: 10px`,\n      '\\n'\n    );\n    console.log('\\n');\n    console.log('\\n');\n  }\n  function logBanners({\n    isFirstMount,\n    suffixText,\n    isBlankArrayAsDependency,\n  }: {\n    isFirstMount?: boolean;\n    suffixText?: string;\n    isBlankArrayAsDependency?: boolean;\n  }) {\n    if (configuration.active) {\n      console.log(\n        `%c///// START SECTION /////`,\n        `background: ${backgroundColorRef.current}; color: white; font-size: 10px`,\n        '\\n'\n      );\n      console.log('\\n');\n      console.log(\n        `%c ${whatChangedHookCountRef.current} ${suffix || ''}`,\n        `background: ${backgroundColorRef.current}; color: white; font-size: 10px`,\n        '👇🏾',\n        `${isFirstMount ? 'FIRST RUN' : 'UPDATES'}`,\n        `${suffixText}`\n      );\n\n      if (isBlankArrayAsDependency) {\n        postConsole();\n      }\n    }\n  }\n\n  const longBannersRef = useHotRefs(logBanners);\n\n  React[hookNameFinal](() => {\n\n   \n      if (!(dependencyRef.current && isDependencyArr)) {\n        return;\n      }\n  \n      // if (dependencyRef.current.length === 0) {\n      //   return;\n      // }\n  \n      // More info, if needed by user\n      const stringSplitted = dependencyNames ? dependencyNames.split(',') : null;\n      let changed = false;\n      const whatChanged = dependency\n        ? dependency.reduce((acc, dep, index) => {\n            if (dependencyRef.current && dep !== dependencyRef.current[index]) {\n              const oldValue = dependencyRef.current[index];\n              dependencyRef.current[index] = dep;\n              if (dependencyNames && stringSplitted) {\n                changed = true;\n                acc[`\"✅\" ${stringSplitted[index]}`] = {\n                  'Old Value': getPrintableInfo(oldValue),\n                  'New Value': getPrintableInfo(dep),\n                };\n              } else {\n                acc[`\"✅\" ${index}`] = {\n                  'Old Value': getPrintableInfo(oldValue),\n                  'New Value': getPrintableInfo(dep),\n                };\n              }\n  \n              return acc;\n            }\n            if (dependencyNames && stringSplitted) {\n              acc[`\"⏺\" ${stringSplitted[index]}`] = {\n                'Old Value': getPrintableInfo(dep),\n                'New Value': getPrintableInfo(dep),\n              };\n            } else {\n              acc[`\"⏺\" ${index}`] = {\n                'Old Value': getPrintableInfo(dep),\n                'New Value': getPrintableInfo(dep),\n              };\n            }\n  \n            return acc;\n          }, {})\n        : {};\n      if (configuration.active) {\n        const isBlankArrayAsDependency =\n          whatChanged && Object.keys(whatChanged).length === 0 && isDependencyArr;\n        longBannersRef.current({\n          isFirstMount: !changed,\n          suffixText: isBlankArrayAsDependency\n            ? ` 👉🏽 This will run only once on mount.`\n            : ``,\n          isBlankArrayAsDependency,\n        });\n  \n        if (!isBlankArrayAsDependency) {\n          console.table(whatChanged);\n          postConsole();\n        }\n      }\n   \n   \n  }, [\n    ...(() => {\n      if (dependency && isDependencyArr) {\n        return dependency;\n      }\n      return [];\n    })(),\n    dependencyRef,\n    longBannersRef,\n    hookName\n  ]);\n}\n\nexport { useWhatChanged, setUseWhatChange };\n"],"names":["what_debug_changed","isObject","t","Object","prototype","toString","call","getPrintableInfo","dependencyItem","Array","isArray","ans","JSON","stringify","e","dependency","dependencyNames","suffix","hookName","hookNameFinal","React","useMemo","dependencyRef","useRef","whatChangedHookCountRef","backgroundColorRef","isDependencyArr","current","postConsole","console","log","color","i","Math","floor","random","getRandomColor","value","fnRef","longBannersRef","isFirstMount","suffixText","isBlankArrayAsDependency","useEffect","stringSplitted","split","changed","whatChanged","reduce","acc","dep","index","oldValue","keys","length","table"],"mappings":"yFAKIA,EAAqB,EAuBnBC,EAAW,SAACC,SAC6B,oBAAtCC,OAAOC,UAAUC,SAASC,KAAKJ,IAGxC,SAASK,EAAiBC,MAIpBP,EAASO,IAAmBC,MAAMC,QAAQF,GAAiB,KACzDG,MAEFA,EAAMC,KAAKC,UAAUL,EAAgB,KAAM,GAC3C,MAAOM,GACPH,EAAM,uBAEDA,SAGFH,yBAcT,SACEO,EACAC,EACAC,EACAC,OAKMC,EAAgBC,EAAMC,SAAQ,iBAGlB,oBAAbH,EACM,kBAIA,cAER,IAEGI,EAAgBF,EAAMG,OAAOR,GAG7BS,EAA0BJ,EAAMG,OAAO,GAGvCE,EAAqBL,EAAMG,OAAO,IAEpCG,EAAkBjB,MAAMC,QAAQY,EAAcK,kBAmBzCC,IACPC,QAAQC,IAAI,MACZD,QAAQC,8CAESL,EAAmBE,0CAClC,MAEFE,QAAQC,IAAI,MACZD,QAAQC,IAAI,MAzBdV,EAAMD,IAAe,WAGfG,EAAcK,SACdD,IAGA1B,IAEAwB,EAAwBG,QAAU3B,EAClCyB,EAAmBE,QAtF3B,mBAEMI,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHY,mBAGKE,KAAKC,MAAsB,GAAhBD,KAAKE,kBAE5BJ,EAgF4BK,MAKhC,CAACd,EAAeI,QAvDDW,EACZC,EAgGAC,GAhGAD,EAAQlB,EAAMG,OADFc,kBAoEhBG,IAAAA,aACAC,IAAAA,WACAC,IAAAA,yBAOEb,QAAQC,iDAESL,EAAmBE,0CAClC,MAEFE,QAAQC,IAAI,MACZD,QAAQC,UACAN,EAAwBG,aAAWV,GAAU,mBACpCQ,EAAmBE,0CAClC,OACGa,EAAe,YAAc,aAC7BC,GAGDC,GACFd,MA1FNR,EAAMuB,WAAU,WACdL,EAAMX,QAAUU,KAGXC,GA6FPlB,EAAMD,IAAe,cAGXG,EAAcK,SAAWD,OASzBkB,EAAiB5B,EAAkBA,EAAgB6B,MAAM,KAAO,KAClEC,GAAU,EACRC,EAAchC,EAChBA,EAAWiC,QAAO,SAACC,EAAKC,EAAKC,MACvB7B,EAAcK,SAAWuB,IAAQ5B,EAAcK,QAAQwB,GAAQ,KAC3DC,EAAW9B,EAAcK,QAAQwB,UACvC7B,EAAcK,QAAQwB,GAASD,EAC3BlC,GAAmB4B,GACrBE,GAAU,EACVG,SAAWL,EAAeO,IAAY,aACvB5C,EAAiB6C,eACjB7C,EAAiB2C,KAGhCD,SAAWE,GAAW,aACP5C,EAAiB6C,eACjB7C,EAAiB2C,IAI3BD,SAELjC,GAAmB4B,EACrBK,SAAWL,EAAeO,IAAY,aACvB5C,EAAiB2C,eACjB3C,EAAiB2C,IAGhCD,SAAWE,GAAW,aACP5C,EAAiB2C,eACjB3C,EAAiB2C,IAI3BD,IACN,IACH,GAEIP,EACJK,GAAmD,IAApC5C,OAAOkD,KAAKN,GAAaO,QAAgB5B,EAC1Da,EAAeZ,QAAQ,CACrBa,cAAeM,EACfL,WAAYC,+CAGZA,yBAAAA,IAGGA,IACHb,QAAQ0B,MAAMR,GACdnB,kBAOAb,GAAcW,EACTX,EAEF,IAETO,EACAiB,EACArB"}
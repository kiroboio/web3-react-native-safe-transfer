"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setConfig = exports.getConfig = void 0;
const path = __importStar(require("path"));
const index_1 = require("./index");
let CONFIG;
setConfig(index_1.DEFAULT_CONFIG);
/**
 * Returns the current config
 *
 * @returns current config
 *
 * @see {@link setConfig}
 *
 * @example
 * ```ts
 * import { getConfig } from 'fliegdoc';
 *
 * console.log('current config:', getConfig());
 * ```
 */
function getConfig() {
    return CONFIG;
}
exports.getConfig = getConfig;
/**
 * Overrides the current config using the `config` on top of the {@link DEFAULT_CONFIG}
 *
 * @param config - overrides of the {@link DEFAULT_CONFIG}
 * @param basePath - the base path of the config file, from which relative paths get resolved
 * @example
 * ```ts
 * import { setConfig } from 'fliegdoc';
 *
 * const config = JSON.parse(
 * 	fs.readFileSync(filepath).toString()
 * )
 *
 * setConfig(config, path.dirname(filepath));
 * ```
 */
function setConfig(config, basePath = process.cwd()) {
    CONFIG = Object.assign(Object.assign({}, index_1.DEFAULT_CONFIG), config);
    CONFIG.outDir = path.resolve(basePath, CONFIG.outDir);
    CONFIG.readme = path.resolve(basePath, CONFIG.readme);
    if (CONFIG.modules)
        CONFIG.modules = CONFIG.modules.map(raw => (Object.assign(Object.assign({}, raw), { tsconfig: path.resolve(basePath, raw.tsconfig), package: path.resolve(basePath, raw.package) })));
}
exports.setConfig = setConfig;
//# sourceMappingURL=config.js.map
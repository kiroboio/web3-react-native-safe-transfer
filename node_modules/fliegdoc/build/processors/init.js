"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processNode = void 0;
const ts_morph_1 = require("ts-morph");
const function_1 = require("./function");
const class_1 = require("./class");
const type_1 = require("./type");
const variable_1 = require("./variable");
const identifier_1 = require("./identifier");
const module_1 = require("./module");
const interface_1 = require("./interface");
/**
 * Processes a node for documentation-relevant values
 *
 * @param node - the node that gets parsed for documentation data
 * @returns documentation tree for the node and its children, if applicable
 * @example
 * ```ts
 * processNode(node);
 * ```
 */
function processNode(node) {
    var _a, _b;
    switch (node.getKind()) {
        case ts_morph_1.SyntaxKind.FunctionDeclaration:
            return function_1.processFunctionDeclaration(node);
        case ts_morph_1.SyntaxKind.ClassDeclaration:
            return class_1.processClassDeclaration(node);
        case ts_morph_1.SyntaxKind.InterfaceDeclaration:
            return interface_1.processInterfaceDeclaration(node);
        case ts_morph_1.SyntaxKind.TypeAliasDeclaration:
            return type_1.processType(node);
        case ts_morph_1.SyntaxKind.VariableDeclaration:
            return variable_1.processVariableDeclaration(node);
        case ts_morph_1.SyntaxKind.Identifier:
            return identifier_1.processIdentifier(node);
        case ts_morph_1.SyntaxKind.ModuleDeclaration:
            return module_1.processModule(node);
        default:
            return {
                type: 'unknown::' + node.getKindName(),
                declarations: [],
                name: (_b = (_a = node.getSymbol()) === null || _a === void 0 ? void 0 : _a.getName()) !== null && _b !== void 0 ? _b : 'unknown'
            };
    }
}
exports.processNode = processNode;
//# sourceMappingURL=init.js.map
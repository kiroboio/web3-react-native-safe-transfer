"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serveDynamic = void 0;
const express_1 = __importDefault(require("express"));
const path_1 = __importDefault(require("path"));
const config_1 = require("../model/config");
/**
 * Starts an http server on `port` and serves the documentation.
 *
 * Instead of writing the docs to the actual file system, this just generates them into a "virtual" file system.
 *
 * **NOTE:** This is great for quickly reviewing the docs, but please keep in mind that all files get saved in-memory.
 * If a theme outputs a lot of images or other bigger files, this might pose a problem.
 *
 * @param tree - the documentation tree
 * @param port - the port on which the documentation gets served
 *
 * @throws Error - if the theme isn't browser-viewable, i.e., if {@link Theme.isBrowserViewable} is `false`
 *
 * @example
 * ```ts
 * import { buildTreeForConfig, serveDynamic } from 'fliegdoc';
 *
 * const tree = buildTreeForConfig();
 * serveDynamic(tree, port);
 * ```
 */
function serveDynamic(tree, port = 3000) {
    return __awaiter(this, void 0, void 0, function* () {
        const config = config_1.getConfig();
        if (!config.theme.isBrowserViewable)
            throw new Error('The selected theme is not browser-viewable.');
        const app = express_1.default();
        yield config.theme.onBuild(tree, config, (absolutePath, content, mimetype) => __awaiter(this, void 0, void 0, function* () {
            // url, extracted from the absolute path of the "virtual" file
            const url = config.baseUrl +
                path_1.default.relative(config.outDir, absolutePath).replace(/\\/g, '/');
            // a handler for serving the file
            const handler = (req, res) => {
                res.type(mimetype);
                res.send(content);
            };
            // register the handler for the full path
            app.get(url, handler);
            // register a handler for the directory if it is an index.html or index.htm
            const match = url.match(/^(.*)\/index.html?$/i);
            if (match) {
                app.get(match[1], handler);
            }
        }));
        app.listen(port, () => {
            console.log(`Listening on http://localhost:${port}${config_1.getConfig().baseUrl}`);
        });
    });
}
exports.serveDynamic = serveDynamic;
//# sourceMappingURL=serveDynamic.js.map
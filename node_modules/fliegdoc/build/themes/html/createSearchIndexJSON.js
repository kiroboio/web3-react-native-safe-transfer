"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSearchIndexJSON = void 0;
const searchIndex_1 = require("./searchIndex");
const config_1 = require("../../model/config");
const path_1 = __importDefault(require("path"));
/**
 * Creates a `search-index.json` for the given `tree`
 *
 * @param tree - the tree for which the index gets created.
 * @param createFile - the {@link CreateFileFunction}
 *
 * @see {@link getSearchIndex}
 *
 * @example
 * ```ts
 * await createSearchIndexJSON(tree, createFile);
 * ```
 */
function createSearchIndexJSON(tree, createFile) {
    return __awaiter(this, void 0, void 0, function* () {
        const searchIndex = searchIndex_1.getSearchIndex(tree, config_1.getConfig());
        yield createFile(path_1.default.join(config_1.getConfig().outDir, 'search-index.json'), Buffer.from(JSON.stringify(searchIndex)), '.json');
    });
}
exports.createSearchIndexJSON = createSearchIndexJSON;
//# sourceMappingURL=createSearchIndexJSON.js.map
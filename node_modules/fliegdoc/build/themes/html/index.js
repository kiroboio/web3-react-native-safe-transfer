"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HTMLTheme = void 0;
const getStaticFileHandler_1 = require("./getStaticFileHandler");
const writeStaticFiles_1 = require("./writeStaticFiles");
const render_1 = require("./render");
/**
 * The default HTML theme.
 *
 * Generates individual pages, per module, and uses all configuration parameters like `config.title`.
 *
 * Rendering gets done using templates written in ETA.
 */
exports.HTMLTheme = {
    isBrowserViewable: true,
    onBuild(tree, config, createFile) {
        return __awaiter(this, void 0, void 0, function* () {
            const { staticFiles, readmeImageReplacer } = getStaticFileHandler_1.getStaticFileHandler(config);
            yield render_1.writeIndexFileFromREADME(readmeImageReplacer, tree, createFile);
            yield writeStaticFiles_1.writeStaticFiles(staticFiles, createFile, config);
            yield render_1.writeModuleFiles(tree, createFile);
        });
    }
};
//# sourceMappingURL=index.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeModuleFiles = exports.writeIndexFileFromREADME = void 0;
const eta_1 = require("eta");
const path_1 = __importDefault(require("path"));
const markdown_it_1 = __importDefault(require("markdown-it"));
const fsp = __importStar(require("fs-extra"));
const config_1 = require("../../model/config");
const createSearchIndexJSON_1 = require("./createSearchIndexJSON");
const origMd = new markdown_it_1.default({ linkify: true });
const viewFolder = path_1.default.resolve(__dirname, '..', '..', '..', 'views');
/**
 * Custom Markdown-It implementation to replace links
 */
const md = {
    render: (md) => {
        return origMd.render((md !== null && md !== void 0 ? md : '').replace(/{@link (.*?)}/g, '[`$1`](#$1)'));
    }
};
/**
 * Writes the index file from the root README.md
 *
 * @param readmeImageReplacer - the README static content replacer from {@link getStaticFileHandler}
 * @param tree - the file tree, used to create the necessary links
 * @param createFile - the create file function, cf. {@link CreateFileFunction}
 *
 * @example
 * ```ts
 * const {staticFiles, readmeImageReplacer} = getStaticFileHandler(config);
 *
 * await writeIndexFileFromREADME(readmeImageReplacer, tree, createFile);
 * ```
 */
function writeIndexFileFromREADME(readmeImageReplacer, tree, createFile) {
    return __awaiter(this, void 0, void 0, function* () {
        /**
         * Readme content as HTML
         */
        const readmeContent = origMd.render((yield fsp.readFile(config_1.getConfig().readme))
            .toString()
            // Handle local image files
            .replace(/!\[(.*?)]\((.*?)\)/g, readmeImageReplacer));
        yield createSearchIndexJSON_1.createSearchIndexJSON(tree, createFile);
        // render readme content to index.html
        yield render('plain', {
            content: readmeContent,
            modules: Object.keys(tree),
            config: config_1.getConfig()
        }, path_1.default.join(config_1.getConfig().outDir, 'index.html'), createFile);
    });
}
exports.writeIndexFileFromREADME = writeIndexFileFromREADME;
/**
 * Writes the module API reference files
 *
 * @param tree - the tree for which the references get generated
 * @param createFile - the {@link CreateFileFunction}
 *
 * @example
 * ```ts
 * await writeModuleFiles(tree, createFile);
 * ```
 */
function writeModuleFiles(tree, createFile) {
    return __awaiter(this, void 0, void 0, function* () {
        // Create module doc files
        yield Promise.all(Object.keys(tree).map(packageName => render('module', {
            moduleName: packageName,
            members: tree[packageName],
            md: md,
            config: config_1.getConfig(),
            modules: Object.keys(tree)
        }, path_1.default.join(config_1.getConfig().outDir, packageName, 'index.html'), createFile)));
    });
}
exports.writeModuleFiles = writeModuleFiles;
/**
 * Render a view to a target file (the `outPath`)
 *
 * @param view - the view that should get rendered, without `.ejs` and relative to the `views` folder
 * @param data - the data passed to the view
 * @param outPath - the path to the file where the view gets rendered to
 * @param createFile - function to create a file
 * @example
 * ```ts
 * render('plain', {
 *  	content: '<h1>Test</h1>'
 *		modules: modules,
 *		config
 * }, path.join(outDir, 'test.html'))
 * ```
 */
function render(view, data, outPath, createFile) {
    return __awaiter(this, void 0, void 0, function* () {
        yield createFile(outPath, Buffer.from((yield (eta_1.renderFile(path_1.default.resolve(viewFolder, view + '.eta'), data, {
            views: viewFolder
        }) || Promise.reject('Error rendering view ' + view))).toString(), 'utf-8'), 'text/html');
    });
}
//# sourceMappingURL=render.js.map